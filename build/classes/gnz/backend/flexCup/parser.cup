/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package gnz.backend.analizadores;

import gnz.backend.cuarteto.*;
import java_cup.runtime.*;
import gnz.backend.nodo.Nodo;
import gnz.backend.nodoExpresion.*;
import gnz.backend.nodoComparacion.*;
import gnz.backend.nodoDeclaracion.*;
import gnz.backend.manejoDeVariables.*;
import gnz.gui.frames.*;
import java.util.LinkedList;

parser code {:

    private EditorDeTextoFrame editor;
    private ManejadorDeDeclaraciones man;
    private String ambito="global";

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor){
        super(lex);
        this.editor=editor;
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
 }
//********************************************************Metodos para If y variantes********************************************************
    private Cuarteto crearInstruccionDeIf(Nodo n1){
      if(n1!=null){
        ManejadorDeExpresionesBooleanas manejadorBooleano = new ManejadorDeExpresionesBooleanas(editor,ambito);
        Cuarteto ultimoCuarteto=manejadorBooleano.evaluarExpresionBooleana(n1);
        if(ultimoCuarteto!=null){
          Cuarteto labelSi = new Cuarteto(null, null, null, ultimoCuarteto.getOperador1(), TipoDeCuarteto.SOLO_LABEL);
          editor.getManTablas().anadirCuarteto(labelSi);
        }
        return ultimoCuarteto;
      }
      return null;
    }

    private String crearInstruccionFinalIf(Cuarteto ultimoCuarteto){
      String labelSalida=null;
      if(ultimoCuarteto!=null){
        labelSalida = "L" + editor.getManTablas().obtenerNuevoNumeroDeLabel();
        Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, labelSalida, TipoDeCuarteto.GOTO);
        Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(cuartetoGoto);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
      return labelSalida;
    }

    private void crearInstruccionFInalElsIf(Cuarteto ultimoCuarteto){
      if(ultimoCuarteto!=null){
        Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, null, TipoDeCuarteto.GOTO);
        Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(cuartetoGoto);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
    }

    private void cambiarLabelSalida(String labelSalida){
      if(labelSalida!=null){
        for(Cuarteto cuarteto:editor.getManTablas().getTablaDeCuarteto()){
            if(cuarteto.getResultado()==null && cuarteto.getTipoDeCuarteto()==TipoDeCuarteto.GOTO){
              cuarteto.setResultado(labelSalida);
            }
        }
        Cuarteto labelNo = new Cuarteto(null, null, null, labelSalida, TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
    }

//*******************************************************Metodos para While*****************************************************
private Cuarteto[] crearInstruccionDeWhile(Nodo n1){
  Cuarteto[] arreglo=new Cuarteto[2];
  if(n1!=null){
    String labelInicio = "L" + editor.getManTablas().obtenerNuevoNumeroDeLabel();
    Cuarteto cuartetoRepetir = new Cuarteto(null, null, null, labelInicio, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(cuartetoRepetir);
    Cuarteto ultimoCuarteto=crearInstruccionDeIf(n1);
    arreglo[0]=cuartetoRepetir;
    arreglo[1]=ultimoCuarteto;
  }
  return arreglo;
}

private void crearInstruccionFinalWhile(Cuarteto[] cuartetos){
    Cuarteto cuartetoRepetir= cuartetos[0];
    Cuarteto cuartetoNo= cuartetos[1];
    if(cuartetoRepetir!=null && cuartetoNo!=null){
      Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, cuartetoRepetir.getResultado(), TipoDeCuarteto.GOTO);
      Cuarteto labelNo = new Cuarteto(null, null, null, cuartetoNo.getResultado(), TipoDeCuarteto.SOLO_LABEL);
      editor.getManTablas().anadirCuarteto(cuartetoGoto);
      editor.getManTablas().anadirCuarteto(labelNo);

    }
}

//************************************************Metodos para do while****************************************************
private void finalicacionDeWhile(Nodo n1,Cuarteto cuartetoInicio){
    ManejadorDeExpresionesBooleanas manejadorBooleano = new ManejadorDeExpresionesBooleanas(editor,ambito);
    Cuarteto ultimoCuarteto = manejadorBooleano.evaluarExpresionBooleana(n1);
    if(ultimoCuarteto!=null){
      //Modificar el penultimo
      int penultimaPosicion=editor.getManTablas().getTablaDeCuarteto().size()-2;
      editor.getManTablas().getTablaDeCuarteto().get(penultimaPosicion).setResultado(cuartetoInicio.getResultado());
      //Modificar el ultimo
      ultimoCuarteto.setOperador1(cuartetoInicio.getResultado());
      Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
      editor.getManTablas().anadirCuarteto(labelNo);
    }
}

//**********************************************Metodos para for***************************************************************
private void finalizacionDeFor(Cuarteto ultimoCuarteto,Cuarteto cuartetoInicio,IncrementoDecremento incr){
  if(ultimoCuarteto!=null && cuartetoInicio!=null){
    String numTemporal = "t" + String.valueOf(editor.getManTablas().obtenerNuevoTemporal());
    editor.getManTablas().anadirCuarteto(new Cuarteto(incr.getTipo(),cuartetoInicio.getOperador1(),incr.getNumero(),cuartetoInicio.getOperador1(),TipoDeCuarteto.SOLO_EXPRESION));
    //Cuarteto que permite volver hacia arriba
    editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, cuartetoInicio.getResultado(), TipoDeCuarteto.GOTOSALIDA));
    //Cuarteto que genera la etiqueta final
    editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL));
  }
}

:}

/*--------------- 2da Area: Declaraciones -----------------------*/

terminal String     PCOMA;
terminal String     ASIGNACION,COMA;
terminal String     IDENTIFICADOR;
terminal String     BOOLEAN;
terminal String     TRUE,FALSE;
terminal String     CHAR;
terminal String     DECLARACION_CARACTER;
terminal String     BYTE,INT,LONG,FLOAT,DOUBLE;
terminal String     NUMERO_ENTERO,NUMERO_DECIMAL,NUMERO_DECIMALF;
terminal String     STRING;
terminal String     DECLARACION_STRING;

terminal String     MAS,POR,MENOS,DIV,PORCENTAJE;
terminal String     MENOR,MAYOR,MENOR_IGUAL,MAYOR_IGUAL,DISTINTO_DE,IGUAL_A;
terminal String     NOT,AND,OR;

terminal String     PARENTESIS_ABIERTO,PARENTESIS_CERRADO,CORCHETE_ABIERTO,CORCHETE_CERRADO;

terminal String     IF,ELSIF,ELSE;

terminal String     WHILE,DO;

terminal String     FOR,DOS_PUNTOS;

terminal String     ARRAY;

terminal String     PRINT,PRINTLN,SCANS,SCANN;

terminal String     VOID,RETURN;

terminal String     MAIN;

terminal String     SEPARADOR;

//terminal String     COMENTARIO_LINEA,COMENTARIO_DE_BLOQUE;


non terminal Object     inicio;
non terminal Object     conjuntoDeInstrucciones;
non terminal Nodo       unaInstruccion;
non terminal LinkedList<Nodo>     conjuntoDeDeclaraciones;
non terminal Nodo     unaDeclaracion;


//******************************************************************Declaracion de variables******************************************

non terminal Nodo     declaracionDeVariables;
non terminal TipoDeVariable     tipoDeVariable;
non terminal LinkedList<NodoId>     conjuntoDeIdentificadoresParaVariables;
non terminal NodoId     unIdentificadorParaVariable;
non terminal Nodo     expresion;

//******************************************************************Condicion y comparacion******************************************

non terminal Nodo     comparacion;

//******************************************************************Asignacion de variables******************************************

non terminal Nodo     asignacionDeVariable;

//******************************************************************Declaracion de arreglos******************************************

non terminal NodoArregloDeclaracion     declaracionDeArreglos;
non terminal NodoId     unIdentificadorParaArreglo;
non terminal LinkedList<Nodo>     conjuntoDeDimensiones;
non terminal Nodo     unaDimension;
non terminal LinkedList<NodoId>     conjuntoDeIdentificadoresParaArreglo;
non terminal Nodo     asignacionDeArreglo;

//******************************************************************Declaracion de estructura If******************************************

non terminal Cuarteto     puenteIf;
non terminal String     declaracionDeEstructuraIf;

//******************************************************************Declaracion de estructura IF-ELSE******************************************

non terminal String     declaracionDeEstructuraIfElse;

//******************************************************************Declaracion de estructura ELSEIF******************************************
non terminal Cuarteto   puenteElsIf;
non terminal Object     declaracionDeEstructuraElseIf,conjuntoDeElseIf,unElseIf;

//******************************************************************DeclaracionCHAR de estructura While******************************************

non terminal Cuarteto[]     puenteWhile;
non terminal Cuarteto[]     declaracionDeEstructuraWhile;
non terminal Object     instrucccionWhile;

//******************************************************************declaracion de estructura DoWhile********************************************

non terminal Cuarteto[]     declaracionDeEstructuraDoWhile;
non terminal Cuarteto     declaracionDo;

//******************************************************************declaracion de estructura For********************************************

non terminal Cuarteto[]     declaracionDeEstructuraFor;
non terminal IncrementoDecremento incrementoDecremento;
non terminal Cuarteto     asignacionParaFor;
non terminal Cuarteto     comparacionParaFor;
//******************************************************************declaracion de funciones Predefinidas********************************************

non terminal Object     declaracionDeFuncionesPredefinidas;
non terminal Object     conjuntoDeTexto;
non terminal Object     unTexto;

//***********************************************************************************Subprogramas*****************************************************

non terminal Object     conjuntoDeSubprogramas;
non terminal Object     unSubPrograma;
non terminal Object     tipoDeRetorno;
non terminal Object     conjuntoDeParametros;
non terminal Object     unParametro;
non terminal Object     cuerpoDeFuncion,instruccionReturn;
non terminal Object     llamadaDeFuncion;
non terminal Object     listaDeParametros,miParametro;
//***********************************************************************************Funcion Main***************************************************
non terminal Object funcionMain;


/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

precedence left ELSE;
precedence left ELSIF;
precedence left MAS, MENOS;
precedence left POR, DIV,PORCENTAJE;
precedence left OR;
precedence left AND;
precedence left NOT;

start with inicio;
//*******************************************************Expresiones,comparaciones y tipos de variables****************************
expresion::= expresion:n1 MAS:i expresion:n2{:RESULT= new NodoExpresion(OperacionAritmetica.MAS,n1,n2,ileft,iright);:};
expresion::= expresion:n1 MENOS:i expresion:n2{:RESULT= new NodoExpresion(OperacionAritmetica.MENOS,n1, n2,ileft,iright);:};
expresion::=expresion:n1 POR:i expresion:n2{:RESULT= new NodoExpresion(OperacionAritmetica.POR,n1,n2,ileft,iright);:};
expresion::=expresion:n1 DIV:i expresion:n2{:RESULT= new NodoExpresion(OperacionAritmetica.DIV,n1,n2,ileft,iright);:};
expresion::=expresion:n1 PORCENTAJE:i expresion:n2{:RESULT= new NodoExpresion(OperacionAritmetica.PORCENTAJE,n1,n2,ileft,iright);:};
expresion::=PARENTESIS_ABIERTO expresion:n1 PARENTESIS_CERRADO{:RESULT = n1;:};
expresion::=MENOS PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO;

expresion::=IDENTIFICADOR:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.IDENTIFICADOR,i,ileft,iright);:};
expresion::=TRUE:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.TRUE,i,ileft,iright);:};
expresion::=FALSE:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.FALSE,i,ileft,iright);:};
expresion::=DECLARACION_CARACTER:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_CARACTER,i,ileft,iright);:};
expresion::=NUMERO_ENTERO:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_ENTERO,i,ileft,iright);:};
expresion::=NUMERO_DECIMAL:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMAL,i,ileft,iright);:};
expresion::=NUMERO_DECIMALF:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMALF,i,ileft,iright);:};
expresion::=DECLARACION_STRING:i{:RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_STRING,i,ileft,iright);:};
expresion::=IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO;
expresion::=IDENTIFICADOR PARENTESIS_ABIERTO listaDeParametros PARENTESIS_CERRADO;
listaDeParametros::=listaDeParametros COMA miParametro | miParametro;
miParametro::=comparacion;

comparacion::= comparacion:n1 AND:i comparacion:n2{:RESULT = new NodoLogico(OperacionLogica.AND,n1,n2,ileft,iright);:};
comparacion::= comparacion:n1 OR:i comparacion:n2{:RESULT = new NodoLogico(OperacionLogica.OR,n1,n2,ileft,iright);:};
comparacion::= NOT comparacion:n1;
//comparacion::= PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO;
comparacion::=expresion:n1 MENOR:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.MENOR,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 MAYOR:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.MAYOR,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 MENOR_IGUAL:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.MENOR_IGUAL,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 MAYOR_IGUAL:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.MAYOR_IGUAL,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 DISTINTO_DE:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.DISTINTO_DE,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 IGUAL_A:i expresion:n2{:RESULT= new NodoComparacion(OperacionComparacion.IGUAL_A,n1,n2,ileft,iright);:};
comparacion::=expresion:n1 {:RESULT=n1;:};

tipoDeVariable::=STRING{:RESULT=TipoDeVariable.STRING;:};
tipoDeVariable::=BOOLEAN{:RESULT=TipoDeVariable.BOOLEAN;:};
tipoDeVariable::=CHAR{:RESULT=TipoDeVariable.CHAR;:};
tipoDeVariable::=BYTE{:RESULT=TipoDeVariable.BYTE;:};
tipoDeVariable::=INT{:RESULT=TipoDeVariable.INT;:};
tipoDeVariable::=LONG{:RESULT=TipoDeVariable.LONG;:};
tipoDeVariable::=FLOAT{:RESULT=TipoDeVariable.FLOAT;:};
tipoDeVariable::=DOUBLE{:RESULT=TipoDeVariable.DOUBLE;:};
tipoDeVariable::=VOID{:RESULT=TipoDeVariable.VOID;:};


//******************************************************************Inicio**********************************************************

inicio::=conjuntoDeDeclaraciones
{::};
inicio::= conjuntoDeDeclaraciones:declaraciones conjuntoDeSubprogramas SEPARADOR funcionMain
{::};
inicio::= conjuntoDeDeclaraciones  SEPARADOR funcionMain;
inicio::= conjuntoDeSubprogramas  SEPARADOR funcionMain;
inicio::= SEPARADOR funcionMain;

conjuntoDeInstrucciones::=conjuntoDeInstrucciones unaInstruccion | unaInstruccion;

//******************************************************************Conjunto de declaraciones**********************************************************
conjuntoDeDeclaraciones::=conjuntoDeDeclaraciones:lista unaDeclaracion:n1
{:lista.add(n1);RESULT=lista;:}
 |
 unaDeclaracion:n1
 {:LinkedList<Nodo> lista = new LinkedList<>();
   lista.add(n1);
   RESULT=lista;
 :};
unaDeclaracion::=declaracionDeVariables:n1
          {:RESULT=n1;:};

unaDeclaracion::=asignacionDeVariable:n1
          {:RESULT=n1;:};

unaDeclaracion::=declaracionDeArreglos:n1
          {:RESULT=n1;:};
unaDeclaracion::=asignacionDeArreglo;

//******************************************************************Error**********************************************************

unaInstruccion::=error;

//******************************************************************Declaracion de variables****************************************************
unaInstruccion::=declaracionDeVariables;
declaracionDeVariables::=tipoDeVariable:tipo conjuntoDeIdentificadoresParaVariables:lista PCOMA
{:
DeclaracionDeVariable declaracion = new DeclaracionDeVariable(tipo,lista,ambito,tipoleft,tiporight);
CreadorDeVariables.declararVariables(declaracion,editor);
:};

conjuntoDeIdentificadoresParaVariables::= conjuntoDeIdentificadoresParaVariables:lista COMA unIdentificadorParaVariable:n1
{:lista.add(n1);RESULT = lista;:}
  |
unIdentificadorParaVariable:n1
{:LinkedList<NodoId> miLista = new LinkedList<>();
  miLista.add(n1);
  RESULT= miLista;
:};

unIdentificadorParaVariable::=IDENTIFICADOR:i {:RESULT= new NodoId(i,null,ileft,iright);:};
unIdentificadorParaVariable::=IDENTIFICADOR:i ASIGNACION comparacion:n1 {:RESULT= new NodoId(i,n1,ileft,iright);:};

//******************************************************************Asignacion de variables****************************************************
unaInstruccion::=asignacionDeVariable;
asignacionDeVariable::=IDENTIFICADOR:i ASIGNACION comparacion:n1 PCOMA
{:NodoId nodo = new NodoId(i,n1,ileft,iright);
  CreadorDeVariables.asignarVariable(nodo,editor,ambito);
  RESULT=nodo;
  :};

//*******************************************************************Declaracion de arreglos********************************************
unaInstruccion::=declaracionDeArreglos:n1{:RESULT=n1;:};
declaracionDeArreglos::=ARRAY:i tipoDeVariable:tipo conjuntoDeDimensiones:dimensiones conjuntoDeIdentificadoresParaArreglo:listaIds PCOMA
{:
NodoArregloDeclaracion nodo = new NodoArregloDeclaracion( tipo, listaIds,dimensiones,ileft,iright);
man = new ManejadorDeDeclaraciones(nodo,editor,ambito);
RESULT=nodo;
:};
conjuntoDeDimensiones::=conjuntoDeDimensiones:lista unaDimension:n1
{:lista.add(n1);
  RESULT=lista;:}
|
unaDimension:n1
{:LinkedList<Nodo> lista = new LinkedList<>();
lista.add(n1);
RESULT = lista;
:};

unaDimension::=CORCHETE_ABIERTO comparacion:n1 CORCHETE_CERRADO{:RESULT = n1;:};

conjuntoDeIdentificadoresParaArreglo::=conjuntoDeIdentificadoresParaArreglo:lista COMA unIdentificadorParaArreglo:i
{:lista.add(i);
RESULT=lista;:}
 |
  unIdentificadorParaArreglo:n1
  {:LinkedList<NodoId> lista = new LinkedList<>();
    lista.add(n1);
    RESULT=lista;
    :};

unIdentificadorParaArreglo::=IDENTIFICADOR:i{:RESULT= new NodoId(i,null,ileft,iright);:};

//*******************************************************************Asignacion de arreglos********************************************
unaInstruccion::=asignacionDeArreglo:n1{:RESULT=n1;:};
asignacionDeArreglo::=IDENTIFICADOR:id conjuntoDeDimensiones:expresiones ASIGNACION comparacion:expresion PCOMA
{:NodoAsignacionArreglo n1 = new NodoAsignacionArreglo(id,expresiones,expresion,idleft,idright);
  man = new ManejadorDeDeclaraciones( n1,editor,ambito);
  RESULT=n1;
  :};

//*******************************************************************Instruccion IF ***************************************************
unaInstruccion::=declaracionDeEstructuraIf:labelFinal
{:if(labelFinal!=null){
  Cuarteto labelSalida = new Cuarteto(null, null, null, labelFinal, TipoDeCuarteto.SOLO_LABEL);
  editor.getManTablas().anadirCuarteto(labelSalida);
}:};

puenteIf::= IF PARENTESIS_ABIERTO:i comparacion:n1 PARENTESIS_CERRADO
{:RESULT=crearInstruccionDeIf(n1);:};
//------>1
declaracionDeEstructuraIf::= puenteIf:ultimoCuarteto unaInstruccion
{:RESULT=crearInstruccionFinalIf(ultimoCuarteto);:};
//------>2
declaracionDeEstructuraIf::= puenteIf:ultimoCuarteto  CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:RESULT=crearInstruccionFinalIf(ultimoCuarteto);:};

//*****************************************************************Instruccion IF-ELSE*****************************************************
unaInstruccion::=declaracionDeEstructuraIfElse:labelSalida
{:
  if(labelSalida!=null){
    Cuarteto labelFinal = new Cuarteto(null, null, null, labelSalida, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(labelFinal);
  }
:};
//------->1
declaracionDeEstructuraIfElse::= declaracionDeEstructuraIf:labelSalida ELSE unaInstruccion
{:RESULT=labelSalida;:};
//------->2
declaracionDeEstructuraIfElse::= declaracionDeEstructuraIf:labelSalida ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:RESULT=labelSalida;:};
//****************************************************************Instruccion ELSEIF*******************************************************
unaInstruccion::=declaracionDeEstructuraElseIf;
//------->1
declaracionDeEstructuraElseIf::=declaracionDeEstructuraIf:labelSalida conjuntoDeElseIf
{:cambiarLabelSalida(labelSalida);:};
//------->2
declaracionDeEstructuraElseIf::=declaracionDeEstructuraIf:labelSalida conjuntoDeElseIf ELSE unaInstruccion
{:cambiarLabelSalida(labelSalida);:};
//------->3
declaracionDeEstructuraElseIf::=declaracionDeEstructuraIf:labelSalida conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:cambiarLabelSalida(labelSalida);:};
//conjuntoDeIdentificadoresParaVariables
conjuntoDeElseIf::=conjuntoDeElseIf unElseIf|unElseIf;

puenteElsIf::=ELSIF PARENTESIS_ABIERTO comparacion:n1 PARENTESIS_CERRADO
{:RESULT=crearInstruccionDeIf(n1);:};

unElseIf::=puenteElsIf:ultimoCuarteto unaInstruccion
{:crearInstruccionFInalElsIf(ultimoCuarteto);:};

unElseIf::=puenteElsIf:ultimoCuarteto CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:crearInstruccionFInalElsIf(ultimoCuarteto);:};


//**********************************************************Instruccion While*************************************************************
unaInstruccion::=declaracionDeEstructuraWhile:cuartetos;

puenteWhile::=WHILE PARENTESIS_ABIERTO comparacion:n1 PARENTESIS_CERRADO
{:RESULT=crearInstruccionDeWhile(n1);:};

declaracionDeEstructuraWhile::= puenteWhile:cuartetos unaInstruccion
{:crearInstruccionFinalWhile(cuartetos);:};
//------->2
declaracionDeEstructuraWhile::=puenteWhile:cuartetos CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:crearInstruccionFinalWhile(cuartetos);:};

//*********************************************************Instruccion Do-While***********************************************************
unaInstruccion::=declaracionDeEstructuraDoWhile
{::};

declaracionDo::=DO
{:  String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
  Cuarteto inicioDeWhile=new Cuarteto("goto", null, null, label, TipoDeCuarteto.SOLO_LABEL);
  editor.getManTablas().anadirCuarteto(inicioDeWhile);
  RESULT= inicioDeWhile;
  :};

declaracionDeEstructuraDoWhile::= declaracionDo:cuartetoInicio unaInstruccion WHILE PARENTESIS_ABIERTO:i comparacion:n1 PARENTESIS_CERRADO
{:finalicacionDeWhile(n1,cuartetoInicio);:};

declaracionDeEstructuraDoWhile::= declaracionDo:cuartetoInicio CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO:i comparacion:n1 PARENTESIS_CERRADO
{:finalicacionDeWhile(n1,cuartetoInicio);:};

//*********************************************************Instruccion For*****************************************************************
unaInstruccion::=declaracionDeEstructuraFor:cuartetos{::};

asignacionParaFor::=FOR PARENTESIS_ABIERTO IDENTIFICADOR:i ASIGNACION comparacion:n1
  {:
    //ASIGNACION y primera etiqueta
    NodoId nodo = new NodoId(i,n1,ileft,iright);
    CreadorDeVariables.asignarVariable(nodo,editor,ambito);
    String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
    Cuarteto inicioDeFor=new Cuarteto("goto", i, null, label, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(inicioDeFor);
    RESULT=inicioDeFor;
    :};

comparacionParaFor::=DOS_PUNTOS:i comparacion:n2 DOS_PUNTOS
{:RESULT=crearInstruccionDeIf(n2);:};

declaracionDeEstructuraFor::=asignacionParaFor:cuartetoInicio comparacionParaFor:ultimoCuarteto incrementoDecremento:incr PARENTESIS_CERRADO unaInstruccion
{:finalizacionDeFor(ultimoCuarteto,cuartetoInicio,incr);:};


declaracionDeEstructuraFor::=asignacionParaFor:cuartetoInicio comparacionParaFor:ultimoCuarteto incrementoDecremento:incr PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO
{:finalizacionDeFor(ultimoCuarteto,cuartetoInicio,incr);:};

incrementoDecremento::= MAS NUMERO_ENTERO:i
{:RESULT = new IncrementoDecremento("+",i);:};

incrementoDecremento::= MENOS NUMERO_ENTERO:i
{:RESULT = new IncrementoDecremento("-",i);:};

//*********************************************************Funciones predefinidas************************************************************
unaInstruccion::=declaracionDeFuncionesPredefinidas;
declaracionDeFuncionesPredefinidas::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA;
declaracionDeFuncionesPredefinidas::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA;
declaracionDeFuncionesPredefinidas::= SCANS CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA;
declaracionDeFuncionesPredefinidas::= SCANN CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA;
conjuntoDeTexto::= conjuntoDeTexto COMA unTexto | unTexto;
unTexto::=expresion;

//************************************************************Return*************************************************************************
unaInstruccion::=instruccionReturn;
instruccionReturn::=RETURN comparacion PCOMA;

//************************************************************Llamada a funciones*************************************************************************
unaInstruccion::=llamadaDeFuncion;
llamadaDeFuncion::=IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO PCOMA;

//*********************************************************Subprogramas**********************************************************************

conjuntoDeSubprogramas::= conjuntoDeSubprogramas unSubPrograma| unSubPrograma;
unSubPrograma::=tipoDeVariable IDENTIFICADOR:i PARENTESIS_ABIERTO{:ambito=i;System.out.println("\n\n\n"+i+"\n\n\n");:} conjuntoDeParametros:parametros PARENTESIS_CERRADO
                CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO{:ambito="";:};

unSubPrograma::=tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO  PARENTESIS_CERRADO
                                CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO;

conjuntoDeParametros::= conjuntoDeParametros COMA unParametro | unParametro;
unParametro::= tipoDeVariable IDENTIFICADOR;

cuerpoDeFuncion::=conjuntoDeDeclaraciones SEPARADOR conjuntoDeInstrucciones;
cuerpoDeFuncion::=conjuntoDeDeclaraciones SEPARADOR;
cuerpoDeFuncion::= SEPARADOR conjuntoDeInstrucciones;
cuerpoDeFuncion::= SEPARADOR;

//***************************************************************funcionMain************************************************************
funcionMain::= MAIN:i PARENTESIS_ABIERTO{:ambito=i;:} PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO;
