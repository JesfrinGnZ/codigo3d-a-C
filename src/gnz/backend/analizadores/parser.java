
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import gnz.backend.cuarteto.*;
import java_cup.runtime.*;
import gnz.backend.nodo.Nodo;
import gnz.backend.nodoExpresion.*;
import gnz.backend.nodoComparacion.*;
import gnz.backend.nodoDeclaracion.*;
import gnz.gui.frames.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\013\006\000\002\054\005" +
    "\000\002\054\003\000\002\055\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\002\003\000\002\002" +
    "\006\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\003\004\000\002\003\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\004\003\000\002\004" +
    "\003\000\002\007\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\012\005\000\002\004\003\000" +
    "\002\016\006\000\002\004\003\000\002\017\007\000\002" +
    "\021\004\000\002\021\003\000\002\022\005\000\002\023" +
    "\005\000\002\023\003\000\002\020\003\000\002\004\003" +
    "\000\002\024\007\000\002\004\003\000\002\025\007\000" +
    "\002\025\011\000\002\004\003\000\002\026\005\000\002" +
    "\026\007\000\002\004\003\000\002\027\004\000\002\027" +
    "\006\000\002\027\010\000\002\030\004\000\002\030\003" +
    "\000\002\031\007\000\002\031\011\000\002\004\003\000" +
    "\002\057\002\000\002\032\010\000\002\060\002\000\002" +
    "\032\012\000\002\004\003\000\002\034\010\000\002\034" +
    "\012\000\002\004\003\000\002\036\013\000\002\036\015" +
    "\000\002\040\005\000\002\037\004\000\002\037\004\000" +
    "\002\004\003\000\002\041\007\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\042\005\000\002\042" +
    "\003\000\002\043\003\000\002\004\003\000\002\052\005" +
    "\000\002\004\003\000\002\053\007\000\002\044\004\000" +
    "\002\044\003\000\002\045\012\000\002\045\011\000\002" +
    "\047\005\000\002\047\003\000\002\050\004\000\002\051" +
    "\005\000\002\051\004\000\002\051\004\000\002\051\003" +
    "\000\002\056\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\032\007\025\010\014\013\007\015\010\016" +
    "\006\017\004\020\021\021\031\025\020\060\030\065\027" +
    "\070\017\001\002\000\006\007\uffdd\047\uffdd\001\002\000" +
    "\034\002\uffd1\007\uffd1\010\uffd1\013\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\025\uffd1\060\uffd1\065\uffd1\070" +
    "\uffd1\001\002\000\006\007\uffde\047\uffde\001\002\000\006" +
    "\007\uffe0\047\uffe0\001\002\000\006\007\uffdf\047\uffdf\001" +
    "\002\000\026\010\uff90\013\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\025\uff90\065\uff90\070\uff90\001\002\000" +
    "\034\002\uffce\007\uffce\010\uffce\013\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\025\uffce\060\uffce\065\uffce\070" +
    "\uffce\001\002\000\034\002\uffd9\007\025\010\014\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\060" +
    "\030\065\027\070\u0105\001\002\000\006\007\uffe1\047\uffe1" +
    "\001\002\000\004\007\u0104\001\002\000\004\002\u0103\001" +
    "\002\000\004\067\374\001\002\000\006\007\uffe2\047\uffe2" +
    "\001\002\000\006\007\uffdc\047\uffdc\001\002\000\034\002" +
    "\uffd0\007\uffd0\010\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\025\uffd0\060\uffd0\065\uffd0\070\uffd0\001" +
    "\002\000\026\010\014\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\065\027\070\142\001\002\000" +
    "\034\002\uffcd\007\uffcd\010\uffcd\013\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\025\uffcd\060\uffcd\065\uffcd\070" +
    "\uffcd\001\002\000\006\005\133\047\034\001\002\000\034" +
    "\002\uffcf\007\uffcf\010\uffcf\013\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\025\uffcf\060\uffcf\065\uffcf\070\uffcf" +
    "\001\002\000\006\007\uffda\047\uffda\001\002\000\024\010" +
    "\014\013\007\015\010\016\006\017\004\020\021\021\031" +
    "\025\020\065\027\001\002\000\006\007\uffdb\047\uffdb\001" +
    "\002\000\004\047\034\001\002\000\010\005\uffc0\007\uffc0" +
    "\047\uffc0\001\002\000\030\007\061\011\047\012\054\014" +
    "\055\022\050\023\060\024\051\026\046\031\045\042\057" +
    "\045\056\001\002\000\006\007\037\047\034\001\002\000" +
    "\010\005\uffc1\007\uffc1\047\uffc1\001\002\000\006\004\uffbc" +
    "\006\uffbc\001\002\000\006\004\043\006\042\001\002\000" +
    "\006\004\uffbd\006\uffbd\001\002\000\004\007\037\001\002" +
    "\000\066\002\uffc2\003\uffc2\007\uffc2\010\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\070\uffc2\001\002\000\006\004\uffbe\006\uffbe\001\002\000" +
    "\004\045\130\001\002\000\046\004\ufff2\006\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\046\ufff2" +
    "\050\ufff2\057\ufff2\001\002\000\046\004\ufff8\006\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\046" +
    "\ufff8\050\ufff8\057\ufff8\001\002\000\046\004\ufff5\006\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5" +
    "\046\ufff5\050\ufff5\057\ufff5\001\002\000\046\004\ufff3\006" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044" +
    "\ufff3\046\ufff3\050\ufff3\057\ufff3\001\002\000\010\043\067" +
    "\044\070\050\127\001\002\000\046\004\uffe3\006\uffe3\027" +
    "\100\030\104\031\102\032\103\033\101\034\113\035\116" +
    "\036\120\037\114\040\115\041\117\043\uffe3\044\uffe3\046" +
    "\uffe3\050\uffe3\057\uffe3\001\002\000\046\004\ufff7\006\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\046\ufff7\050\ufff7\057\ufff7\001\002\000\046\004\ufff6\006" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044" +
    "\ufff6\046\ufff6\050\ufff6\057\ufff6\001\002\000\026\007\061" +
    "\011\047\012\054\014\055\022\050\023\060\024\051\026" +
    "\046\031\045\045\056\001\002\000\030\007\061\011\047" +
    "\012\054\014\055\022\050\023\060\024\051\026\046\031" +
    "\045\042\057\045\056\001\002\000\046\004\ufff4\006\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4" +
    "\046\ufff4\050\ufff4\057\ufff4\001\002\000\050\004\ufff9\006" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044" +
    "\ufff9\045\062\046\ufff9\050\ufff9\057\ufff9\001\002\000\032" +
    "\007\061\011\047\012\054\014\055\022\050\023\060\024" +
    "\051\026\046\031\045\042\057\045\056\046\066\001\002" +
    "\000\006\006\073\046\074\001\002\000\006\006\uffee\046" +
    "\uffee\001\002\000\012\006\uffed\043\067\044\070\046\uffed" +
    "\001\002\000\046\004\ufff1\006\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\043\ufff1\044\ufff1\046\ufff1\050\ufff1\057" +
    "\ufff1\001\002\000\030\007\061\011\047\012\054\014\055" +
    "\022\050\023\060\024\051\026\046\031\045\042\057\045" +
    "\056\001\002\000\030\007\061\011\047\012\054\014\055" +
    "\022\050\023\060\024\051\026\046\031\045\042\057\045" +
    "\056\001\002\000\020\004\uffeb\006\uffeb\043\067\044\uffeb" +
    "\046\uffeb\050\uffeb\057\uffeb\001\002\000\020\004\uffec\006" +
    "\uffec\043\uffec\044\uffec\046\uffec\050\uffec\057\uffec\001\002" +
    "\000\030\007\061\011\047\012\054\014\055\022\050\023" +
    "\060\024\051\026\046\031\045\042\057\045\056\001\002" +
    "\000\046\004\ufff0\006\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\057\ufff0\001" +
    "\002\000\006\006\uffef\046\uffef\001\002\000\020\004\uffea" +
    "\006\uffea\043\uffea\044\uffea\046\uffea\050\uffea\057\uffea\001" +
    "\002\000\016\027\100\030\104\031\102\032\103\033\101" +
    "\046\105\001\002\000\026\007\061\011\047\012\054\014" +
    "\055\022\050\023\060\024\051\026\046\031\045\045\056" +
    "\001\002\000\026\007\061\011\047\012\054\014\055\022" +
    "\050\023\060\024\051\026\046\031\045\045\056\001\002" +
    "\000\026\007\061\011\047\012\054\014\055\022\050\023" +
    "\060\024\051\026\046\031\045\045\056\001\002\000\026" +
    "\007\061\011\047\012\054\014\055\022\050\023\060\024" +
    "\051\026\046\031\045\045\056\001\002\000\026\007\061" +
    "\011\047\012\054\014\055\022\050\023\060\024\051\026" +
    "\046\031\045\045\056\001\002\000\046\004\ufffb\006\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb" +
    "\046\ufffb\050\ufffb\057\ufffb\001\002\000\046\004\ufffe\006" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\044" +
    "\ufffe\046\ufffe\050\ufffe\057\ufffe\001\002\000\046\004\ufffd" +
    "\006\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd" +
    "\044\ufffd\046\ufffd\050\ufffd\057\ufffd\001\002\000\046\004" +
    "\uffff\006\uffff\027\uffff\030\104\031\uffff\032\103\033\101" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\043" +
    "\uffff\044\uffff\046\uffff\050\uffff\057\uffff\001\002\000\046" +
    "\004\ufffc\006\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\043\ufffc\044\ufffc\046\ufffc\050\ufffc\057\ufffc\001\002\000" +
    "\046\004\000\006\000\027\000\030\104\031\000\032\103" +
    "\033\101\034\000\035\000\036\000\037\000\040\000\041" +
    "\000\043\000\044\000\046\000\050\000\057\000\001\002" +
    "\000\026\007\061\011\047\012\054\014\055\022\050\023" +
    "\060\024\051\026\046\031\045\045\056\001\002\000\026" +
    "\007\061\011\047\012\054\014\055\022\050\023\060\024" +
    "\051\026\046\031\045\045\056\001\002\000\026\007\061" +
    "\011\047\012\054\014\055\022\050\023\060\024\051\026" +
    "\046\031\045\045\056\001\002\000\026\007\061\011\047" +
    "\012\054\014\055\022\050\023\060\024\051\026\046\031" +
    "\045\045\056\001\002\000\026\007\061\011\047\012\054" +
    "\014\055\022\050\023\060\024\051\026\046\031\045\045" +
    "\056\001\002\000\026\007\061\011\047\012\054\014\055" +
    "\022\050\023\060\024\051\026\046\031\045\045\056\001" +
    "\002\000\032\004\uffe7\006\uffe7\027\100\030\104\031\102" +
    "\032\103\033\101\043\uffe7\044\uffe7\046\uffe7\050\uffe7\057" +
    "\uffe7\001\002\000\032\004\uffe4\006\uffe4\027\100\030\104" +
    "\031\102\032\103\033\101\043\uffe4\044\uffe4\046\uffe4\050" +
    "\uffe4\057\uffe4\001\002\000\032\004\uffe8\006\uffe8\027\100" +
    "\030\104\031\102\032\103\033\101\043\uffe8\044\uffe8\046" +
    "\uffe8\050\uffe8\057\uffe8\001\002\000\032\004\uffe5\006\uffe5" +
    "\027\100\030\104\031\102\032\103\033\101\043\uffe5\044" +
    "\uffe5\046\uffe5\050\uffe5\057\uffe5\001\002\000\032\004\uffe6" +
    "\006\uffe6\027\100\030\104\031\102\032\103\033\101\043" +
    "\uffe6\044\uffe6\046\uffe6\050\uffe6\057\uffe6\001\002\000\032" +
    "\004\uffe9\006\uffe9\027\100\030\104\031\102\032\103\033" +
    "\101\043\uffe9\044\uffe9\046\uffe9\050\uffe9\057\uffe9\001\002" +
    "\000\010\005\uffbf\007\uffbf\047\uffbf\001\002\000\026\007" +
    "\061\011\047\012\054\014\055\022\050\023\060\024\051" +
    "\026\046\031\045\045\056\001\002\000\016\027\100\030" +
    "\104\031\102\032\103\033\101\046\132\001\002\000\046" +
    "\004\ufffa\006\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\043\ufffa\044\ufffa\046\ufffa\050\ufffa\057\ufffa\001\002\000" +
    "\030\007\061\011\047\012\054\014\055\022\050\023\060" +
    "\024\051\026\046\031\045\042\057\045\056\001\002\000" +
    "\006\005\135\047\034\001\002\000\030\007\061\011\047" +
    "\012\054\014\055\022\050\023\060\024\051\026\046\031" +
    "\045\042\057\045\056\001\002\000\010\004\137\043\067" +
    "\044\070\001\002\000\066\002\uffba\003\uffba\007\uffba\010" +
    "\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\025\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\070\uffba\001\002\000\010\004\141\043" +
    "\067\044\070\001\002\000\066\002\uffc4\003\uffc4\007\uffc4" +
    "\010\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\025\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\070\uffc4\001\002\000\004\067\374" +
    "\001\002\000\026\010\uff91\013\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\025\uff91\065\uff91\070\uff91\001\002" +
    "\000\004\007\145\001\002\000\004\045\146\001\002\000" +
    "\026\010\014\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\046\151\065\027\001\002\000\006\006" +
    "\322\046\367\001\002\000\006\006\uff8c\046\uff8c\001\002" +
    "\000\004\047\154\001\002\000\004\007\153\001\002\000" +
    "\006\006\uff8b\046\uff8b\001\002\000\032\007\025\010\014" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\060\030\065\027\070\157\001\002\000\032\007\025" +
    "\010\014\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\060\030\065\027\070\365\001\002\000\004" +
    "\007\354\001\002\000\056\003\200\007\172\010\014\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\050\uff87\051\173\054\205\055\212\056\167\060\030\061" +
    "\211\062\166\063\210\064\213\065\027\066\175\001\002" +
    "\000\004\050\161\001\002\000\026\010\uff8e\013\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\025\uff8e\065\uff8e" +
    "\070\uff8e\001\002\000\062\003\uffab\007\uffab\010\uffab\013" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\025\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\001\002\000\062\003\uffa3\007\uffa3\010\uffa3\013" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\025\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\001\002\000\056\003\uffd3\007\uffd3\010\uffd3\013" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\025\uffd3" +
    "\050\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002" +
    "\000\062\003\uffbb\007\uffbb\010\uffbb\013\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\025\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\004\047\350\001\002\000\004\045\326\001\002\000" +
    "\062\003\uff95\007\uff95\010\uff95\013\uff95\015\uff95\016\uff95" +
    "\017\uff95\020\uff95\021\uff95\025\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\001\002\000" +
    "\062\003\uffc3\007\uffc3\010\uffc3\013\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\025\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000" +
    "\010\005\133\045\320\047\034\001\002\000\004\045\311" +
    "\001\002\000\062\003\uff93\007\uff93\010\uff93\013\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\025\uff93\050\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\001\002\000\030\007\061\011\047\012\054\014\055\022" +
    "\050\023\060\024\051\026\046\031\045\042\057\045\056" +
    "\001\002\000\062\003\uffa6\007\uffa6\010\uffa6\013\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\025\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\001\002\000\056\003\200\007\172\010\014\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\050\uff88" +
    "\051\173\054\205\055\212\056\167\060\030\061\211\062" +
    "\166\063\210\064\213\065\027\066\175\001\002\000\062" +
    "\003\uffcc\007\uffcc\010\uffcc\013\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\025\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000\062" +
    "\003\uffcb\007\uffcb\010\uffcb\013\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\025\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\062" +
    "\003\uffb3\007\uffb3\010\uffb3\013\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\025\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\062" +
    "\003\uffb9\007\uffb9\010\uffb9\013\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\025\uffb9\050\uffb9\051\uffb9\052\264" +
    "\053\262\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\062" +
    "\003\uff9d\007\uff9d\010\uff9d\013\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\025\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000\004" +
    "\045\251\001\002\000\062\003\uffc5\007\uffc5\010\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\001\002\000\062\003\uffb6\007\uffb6\010\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\001\002\000\004\047\245\001\002\000\004\047" +
    "\235\001\002\000\056\003\200\007\172\010\014\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\047" +
    "\221\051\173\054\205\055\212\056\167\060\030\061\211" +
    "\062\166\063\210\064\213\065\027\066\175\001\002\000" +
    "\004\047\214\001\002\000\004\007\215\001\002\000\004" +
    "\050\216\001\002\000\004\004\217\001\002\000\062\003" +
    "\uff99\007\uff99\010\uff99\013\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\025\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\066\uff99\001\002\000\004\054" +
    "\231\001\002\000\054\003\200\007\172\010\014\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\051" +
    "\173\054\205\055\212\056\167\060\030\061\211\062\166" +
    "\063\210\064\213\065\027\066\175\001\002\000\056\003" +
    "\200\007\172\010\014\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\050\223\051\173\054\205\055" +
    "\212\056\167\060\030\061\211\062\166\063\210\064\213" +
    "\065\027\066\175\001\002\000\004\054\225\001\002\000" +
    "\056\003\uffd4\007\uffd4\010\uffd4\013\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\025\uffd4\050\uffd4\051\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\001\002\000\004\045\226\001" +
    "\002\000\030\007\061\011\047\012\054\014\055\022\050" +
    "\023\060\024\051\026\046\031\045\042\057\045\056\001" +
    "\002\000\010\043\067\044\070\046\230\001\002\000\062" +
    "\003\uffa4\007\uffa4\010\uffa4\013\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\025\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\004" +
    "\045\232\001\002\000\030\007\061\011\047\012\054\014" +
    "\055\022\050\023\060\024\051\026\046\031\045\042\057" +
    "\045\056\001\002\000\010\043\067\044\070\046\234\001" +
    "\002\000\062\003\uffa5\007\uffa5\010\uffa5\013\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\025\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\026\007\061\011\047\012\054\014\055\022\050" +
    "\023\060\024\051\026\046\031\045\045\056\001\002\000" +
    "\006\006\uff97\050\uff97\001\002\000\020\006\uff96\027\100" +
    "\030\104\031\102\032\103\033\101\050\uff96\001\002\000" +
    "\006\006\241\050\242\001\002\000\026\007\061\011\047" +
    "\012\054\014\055\022\050\023\060\024\051\026\046\031" +
    "\045\045\056\001\002\000\004\004\243\001\002\000\062" +
    "\003\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\025\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\001\002\000\006" +
    "\006\uff98\050\uff98\001\002\000\004\007\246\001\002\000" +
    "\004\050\247\001\002\000\004\004\250\001\002\000\062" +
    "\003\uff9a\007\uff9a\010\uff9a\013\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\025\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\001\002\000\030" +
    "\007\061\011\047\012\054\014\055\022\050\023\060\024" +
    "\051\026\046\031\045\042\057\045\056\001\002\000\010" +
    "\043\067\044\070\046\253\001\002\000\056\003\uffaa\007" +
    "\uffaa\010\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\025\uffaa\047\uffa8\051\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\001\002\000\004\047\257\001\002\000\054\003" +
    "\200\007\172\010\014\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\051\173\054\205\055\212\056" +
    "\167\060\030\061\211\062\166\063\210\064\213\065\027" +
    "\066\175\001\002\000\062\003\uffa9\007\uffa9\010\uffa9\013" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\025\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\001\002\000\054\003\200\007\172\010\014\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\051\173\054\205\055\212\056\167\060\030\061\211\062" +
    "\166\063\210\064\213\065\027\066\175\001\002\000\056" +
    "\003\200\007\172\010\014\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\050\261\051\173\054\205" +
    "\055\212\056\167\060\030\061\211\062\166\063\210\064" +
    "\213\065\027\066\175\001\002\000\062\003\uffa7\007\uffa7" +
    "\010\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\025\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\001\002\000\056\003\200\007\172" +
    "\010\014\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\047\304\051\173\054\205\055\212\056\167" +
    "\060\030\061\211\062\166\063\210\064\213\065\027\066" +
    "\175\001\002\000\062\003\uffb2\007\uffb2\010\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2\050" +
    "\uffb2\051\uffb2\052\264\053\275\054\uffb2\055\uffb2\056\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\001\002\000\004\045\266\001\002\000\062\003\uffae" +
    "\007\uffae\010\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\025\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\066\uffae\001\002\000\030\007\061" +
    "\011\047\012\054\014\055\022\050\023\060\024\051\026" +
    "\046\031\045\042\057\045\056\001\002\000\010\043\067" +
    "\044\070\046\270\001\002\000\056\003\200\007\172\010" +
    "\014\013\007\015\010\016\006\017\004\020\021\021\031" +
    "\025\020\047\272\051\173\054\205\055\212\056\167\060" +
    "\030\061\211\062\166\063\210\064\213\065\027\066\175" +
    "\001\002\000\062\003\uffad\007\uffad\010\uffad\013\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\025\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\001\002\000\054\003\200\007\172\010\014\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\051\173" +
    "\054\205\055\212\056\167\060\030\061\211\062\166\063" +
    "\210\064\213\065\027\066\175\001\002\000\056\003\200" +
    "\007\172\010\014\013\007\015\010\016\006\017\004\020" +
    "\021\021\031\025\020\050\274\051\173\054\205\055\212" +
    "\056\167\060\030\061\211\062\166\063\210\064\213\065" +
    "\027\066\175\001\002\000\062\003\uffac\007\uffac\010\uffac" +
    "\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\025" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\001\002\000\056\003\200\007\172\010\014" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\047\300\051\173\054\205\055\212\056\167\060\030" +
    "\061\211\062\166\063\210\064\213\065\027\066\175\001" +
    "\002\000\062\003\uffaf\007\uffaf\010\uffaf\013\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\025\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001" +
    "\002\000\062\003\uffb1\007\uffb1\010\uffb1\013\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001" +
    "\002\000\054\003\200\007\172\010\014\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\051\173\054" +
    "\205\055\212\056\167\060\030\061\211\062\166\063\210" +
    "\064\213\065\027\066\175\001\002\000\056\003\200\007" +
    "\172\010\014\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\050\302\051\173\054\205\055\212\056" +
    "\167\060\030\061\211\062\166\063\210\064\213\065\027" +
    "\066\175\001\002\000\062\003\uffb0\007\uffb0\010\uffb0\013" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\025\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\001\002\000\062\003\uffb5\007\uffb5\010\uffb5\013" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\001\002\000\054\003\200\007\172\010\014\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\051\173\054\205\055\212\056\167\060\030\061\211\062" +
    "\166\063\210\064\213\065\027\066\175\001\002\000\056" +
    "\003\200\007\172\010\014\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\050\306\051\173\054\205" +
    "\055\212\056\167\060\030\061\211\062\166\063\210\064" +
    "\213\065\027\066\175\001\002\000\062\003\uffb4\007\uffb4" +
    "\010\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\025\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\001\002\000\010\004\310\043\067" +
    "\044\070\001\002\000\062\003\uff94\007\uff94\010\uff94\013" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\025\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94" +
    "\066\uff94\001\002\000\030\007\061\011\047\012\054\014" +
    "\055\022\050\023\060\024\051\026\046\031\045\042\057" +
    "\045\056\001\002\000\010\043\067\044\070\046\313\001" +
    "\002\000\056\003\200\007\172\010\014\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\047\315\051" +
    "\173\054\205\055\212\056\167\060\030\061\211\062\166" +
    "\063\210\064\213\065\027\066\175\001\002\000\062\003" +
    "\uffb8\007\uffb8\010\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\025\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\054\003" +
    "\200\007\172\010\014\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\051\173\054\205\055\212\056" +
    "\167\060\030\061\211\062\166\063\210\064\213\065\027" +
    "\066\175\001\002\000\056\003\200\007\172\010\014\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\050\317\051\173\054\205\055\212\056\167\060\030\061" +
    "\211\062\166\063\210\064\213\065\027\066\175\001\002" +
    "\000\062\003\uffb7\007\uffb7\010\uffb7\013\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002" +
    "\000\024\010\014\013\007\015\010\016\006\017\004\020" +
    "\021\021\031\025\020\065\027\001\002\000\006\006\322" +
    "\046\323\001\002\000\024\010\014\013\007\015\010\016" +
    "\006\017\004\020\021\021\031\025\020\065\027\001\002" +
    "\000\004\004\324\001\002\000\062\003\uff92\007\uff92\010" +
    "\uff92\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\025\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\001\002\000\006\006\uff8d\046\uff8d\001" +
    "\002\000\004\007\330\001\002\000\004\057\333\001\002" +
    "\000\004\005\331\001\002\000\030\007\061\011\047\012" +
    "\054\014\055\022\050\023\060\024\051\026\046\031\045" +
    "\042\057\045\056\001\002\000\010\043\067\044\070\057" +
    "\uffa0\001\002\000\030\007\061\011\047\012\054\014\055" +
    "\022\050\023\060\024\051\026\046\031\045\042\057\045" +
    "\056\001\002\000\010\043\067\044\070\057\335\001\002" +
    "\000\006\027\336\031\340\001\002\000\004\022\347\001" +
    "\002\000\004\046\342\001\002\000\004\022\341\001\002" +
    "\000\004\046\uff9e\001\002\000\056\003\200\007\172\010" +
    "\014\013\007\015\010\016\006\017\004\020\021\021\031" +
    "\025\020\047\344\051\173\054\205\055\212\056\167\060" +
    "\030\061\211\062\166\063\210\064\213\065\027\066\175" +
    "\001\002\000\062\003\uffa2\007\uffa2\010\uffa2\013\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\025\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\001\002\000\054\003\200\007\172\010\014\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\051\173" +
    "\054\205\055\212\056\167\060\030\061\211\062\166\063" +
    "\210\064\213\065\027\066\175\001\002\000\056\003\200" +
    "\007\172\010\014\013\007\015\010\016\006\017\004\020" +
    "\021\021\031\025\020\050\346\051\173\054\205\055\212" +
    "\056\167\060\030\061\211\062\166\063\210\064\213\065" +
    "\027\066\175\001\002\000\062\003\uffa1\007\uffa1\010\uffa1" +
    "\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\025" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\004\046\uff9f\001\002\000\026" +
    "\007\061\011\047\012\054\014\055\022\050\023\060\024" +
    "\051\026\046\031\045\045\056\001\002\000\006\006\241" +
    "\050\352\001\002\000\004\004\353\001\002\000\062\003" +
    "\uff9c\007\uff9c\010\uff9c\013\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\025\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\010\004" +
    "\uffc7\005\362\006\uffc7\001\002\000\006\004\uffc8\006\uffc8" +
    "\001\002\000\006\004\360\006\357\001\002\000\004\007" +
    "\354\001\002\000\066\002\uffca\003\uffca\007\uffca\010\uffca" +
    "\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\025" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\070\uffca\001\002\000\006\004\uffc9\006\uffc9" +
    "\001\002\000\030\007\061\011\047\012\054\014\055\022" +
    "\050\023\060\024\051\026\046\031\045\042\057\045\056" +
    "\001\002\000\012\004\uffc6\006\uffc6\043\067\044\070\001" +
    "\002\000\034\002\uffd2\007\uffd2\010\uffd2\013\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\025\uffd2\060\uffd2\065" +
    "\uffd2\070\uffd2\001\002\000\056\003\200\007\172\010\014" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\050\uff89\051\173\054\205\055\212\056\167\060\030" +
    "\061\211\062\166\063\210\064\213\065\027\066\175\001" +
    "\002\000\056\003\200\007\172\010\014\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\050\uff8a\051" +
    "\173\054\205\055\212\056\167\060\030\061\211\062\166" +
    "\063\210\064\213\065\027\066\175\001\002\000\004\047" +
    "\370\001\002\000\032\007\025\010\014\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\060\030\065" +
    "\027\070\157\001\002\000\004\050\372\001\002\000\026" +
    "\010\uff8f\013\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\025\uff8f\065\uff8f\070\uff8f\001\002\000\004\002\uffd6" +
    "\001\002\000\004\045\375\001\002\000\004\046\376\001" +
    "\002\000\004\047\377\001\002\000\054\003\200\007\172" +
    "\010\014\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\051\173\054\205\055\212\056\167\060\030" +
    "\061\211\062\166\063\210\064\213\065\027\066\175\001" +
    "\002\000\056\003\200\007\172\010\014\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\050\u0101\051" +
    "\173\054\205\055\212\056\167\060\030\061\211\062\166" +
    "\063\210\064\213\065\027\066\175\001\002\000\004\002" +
    "\uff86\001\002\000\004\002\uffd5\001\002\000\004\002\001" +
    "\001\002\000\012\004\uffc7\005\362\006\uffc7\045\146\001" +
    "\002\000\004\067\374\001\002\000\026\010\014\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\065" +
    "\027\070\u0107\001\002\000\004\067\374\001\002\000\004" +
    "\002\uffd8\001\002\000\004\002\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\026\002\015\005\012\006\004\007\021\010" +
    "\014\016\025\017\011\024\023\044\022\045\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\363\007\021\010\014\016\025\017" +
    "\011\024\023\044\u0105\045\010\001\001\000\002\001\001" +
    "\000\006\011\355\012\354\001\001\000\002\001\001\000" +
    "\004\056\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\143\045\142\001\001\000" +
    "\002\001\001\000\006\021\133\022\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\031\001\001\000" +
    "\002\001\001\000\006\021\034\022\032\001\001\000\002" +
    "\001\001\000\006\013\052\014\051\001\001\000\010\020" +
    "\040\022\035\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\076\001" +
    "\001\000\006\013\052\014\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\052\014\064\054\062\055" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\052\014\071\001" +
    "\001\000\006\013\052\014\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\052\014\064\055\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\111\001\001\000\004\013" +
    "\110\001\001\000\004\013\107\001\001\000\004\013\106" +
    "\001\001\000\004\013\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\125\001\001\000" +
    "\004\013\124\001\001\000\004\013\123\001\001\000\004" +
    "\013\122\001\001\000\004\013\121\001\001\000\004\013" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\052\014\137\001" +
    "\001\000\004\022\035\001\001\000\006\013\052\014\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\151\047\146\050\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\154\006\004\007\021\010\155\016\025" +
    "\017\011\024\023\051\157\001\001\000\016\006\363\007" +
    "\021\010\155\016\025\017\011\024\023\001\001\000\006" +
    "\011\355\012\354\001\001\000\042\003\176\004\163\007" +
    "\200\010\155\016\205\017\170\024\164\025\202\026\206" +
    "\027\201\032\161\034\175\036\162\041\203\052\167\053" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\133\022\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\052\014\306" +
    "\001\001\000\002\001\001\000\040\004\223\007\200\010" +
    "\155\016\205\017\170\024\164\025\202\026\206\027\201" +
    "\032\161\034\175\036\162\041\203\052\167\053\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\262\031\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\217\007\200\010" +
    "\155\016\205\017\170\024\164\025\202\026\206\027\201" +
    "\032\161\034\175\036\162\041\203\052\167\053\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\221\004\163\007\200\010\155\016\205\017\170" +
    "\024\164\025\202\026\206\027\201\032\161\034\175\036" +
    "\162\041\203\052\167\053\173\001\001\000\040\004\223" +
    "\007\200\010\155\016\205\017\170\024\164\025\202\026" +
    "\206\027\201\032\161\034\175\036\162\041\203\052\167" +
    "\053\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\052\014\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\052\014\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\236\042\237\043\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\236" +
    "\043\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\052\014\251\001" +
    "\001\000\002\001\001\000\006\057\254\060\253\001\001" +
    "\000\002\001\001\000\040\004\255\007\200\010\155\016" +
    "\205\017\170\024\164\025\202\026\206\027\201\032\161" +
    "\034\175\036\162\041\203\052\167\053\173\001\001\000" +
    "\002\001\001\000\042\003\257\004\163\007\200\010\155" +
    "\016\205\017\170\024\164\025\202\026\206\027\201\032" +
    "\161\034\175\036\162\041\203\052\167\053\173\001\001" +
    "\000\040\004\223\007\200\010\155\016\205\017\170\024" +
    "\164\025\202\026\206\027\201\032\161\034\175\036\162" +
    "\041\203\052\167\053\173\001\001\000\002\001\001\000" +
    "\040\004\302\007\200\010\155\016\205\017\170\024\164" +
    "\025\202\026\206\027\201\032\161\034\175\036\162\041" +
    "\203\052\167\053\173\001\001\000\004\031\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\052\014" +
    "\266\001\001\000\002\001\001\000\040\004\270\007\200" +
    "\010\155\016\205\017\170\024\164\025\202\026\206\027" +
    "\201\032\161\034\175\036\162\041\203\052\167\053\173" +
    "\001\001\000\002\001\001\000\042\003\272\004\163\007" +
    "\200\010\155\016\205\017\170\024\164\025\202\026\206" +
    "\027\201\032\161\034\175\036\162\041\203\052\167\053" +
    "\173\001\001\000\040\004\223\007\200\010\155\016\205" +
    "\017\170\024\164\025\202\026\206\027\201\032\161\034" +
    "\175\036\162\041\203\052\167\053\173\001\001\000\002" +
    "\001\001\000\040\004\276\007\200\010\155\016\205\017" +
    "\170\024\164\025\202\026\206\027\201\032\161\034\175" +
    "\036\162\041\203\052\167\053\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\300\004\163\007\200" +
    "\010\155\016\205\017\170\024\164\025\202\026\206\027" +
    "\201\032\161\034\175\036\162\041\203\052\167\053\173" +
    "\001\001\000\040\004\223\007\200\010\155\016\205\017" +
    "\170\024\164\025\202\026\206\027\201\032\161\034\175" +
    "\036\162\041\203\052\167\053\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\304\004\163\007\200" +
    "\010\155\016\205\017\170\024\164\025\202\026\206\027" +
    "\201\032\161\034\175\036\162\041\203\052\167\053\173" +
    "\001\001\000\040\004\223\007\200\010\155\016\205\017" +
    "\170\024\164\025\202\026\206\027\201\032\161\034\175" +
    "\036\162\041\203\052\167\053\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\052" +
    "\014\311\001\001\000\002\001\001\000\040\004\313\007" +
    "\200\010\155\016\205\017\170\024\164\025\202\026\206" +
    "\027\201\032\161\034\175\036\162\041\203\052\167\053" +
    "\173\001\001\000\002\001\001\000\042\003\315\004\163" +
    "\007\200\010\155\016\205\017\170\024\164\025\202\026" +
    "\206\027\201\032\161\034\175\036\162\041\203\052\167" +
    "\053\173\001\001\000\040\004\223\007\200\010\155\016" +
    "\205\017\170\024\164\025\202\026\206\027\201\032\161" +
    "\034\175\036\162\041\203\052\167\053\173\001\001\000" +
    "\002\001\001\000\010\010\151\047\320\050\147\001\001" +
    "\000\002\001\001\000\006\010\151\050\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\052\014\331\001\001\000\002\001\001\000\006" +
    "\013\052\014\333\001\001\000\002\001\001\000\004\037" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\342\007\200\010" +
    "\155\016\205\017\170\024\164\025\202\026\206\027\201" +
    "\032\161\034\175\036\162\041\203\052\167\053\173\001" +
    "\001\000\002\001\001\000\042\003\344\004\163\007\200" +
    "\010\155\016\205\017\170\024\164\025\202\026\206\027" +
    "\201\032\161\034\175\036\162\041\203\052\167\053\173" +
    "\001\001\000\040\004\223\007\200\010\155\016\205\017" +
    "\170\024\164\025\202\026\206\027\201\032\161\034\175" +
    "\036\162\041\203\052\167\053\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\236\042\350\043\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\052\014\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\365\004\163\007\200\010" +
    "\155\016\205\017\170\024\164\025\202\026\206\027\201" +
    "\032\161\034\175\036\162\041\203\052\167\053\173\001" +
    "\001\000\040\004\223\007\200\010\155\016\205\017\170" +
    "\024\164\025\202\026\206\027\201\032\161\034\175\036" +
    "\162\041\203\052\167\053\173\001\001\000\002\001\001" +
    "\000\022\005\154\006\004\007\021\010\155\016\025\017" +
    "\011\024\023\051\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\377\004\163\007\200" +
    "\010\155\016\205\017\170\024\164\025\202\026\206\027" +
    "\201\032\161\034\175\036\162\041\203\052\167\053\173" +
    "\001\001\000\040\004\223\007\200\010\155\016\205\017" +
    "\170\024\164\025\202\026\206\027\201\032\161\034\175" +
    "\036\162\041\203\052\167\053\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u0108\001\001\000\006\010\143\045\142\001" +
    "\001\000\004\056\u0107\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private EditorDeTextoFrame editor;
    private ManejadorDeDeclaraciones man;

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor){
        super(lex);
        this.editor=editor;
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        int columna = s.right+1;
        int linea = s.left+1;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        int columna = s.right+1;
        int linea = s.left+1;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
 }

    public Cuarteto[] evaluarComparacionDeCiclo(Nodo n1,int ileft,int iright){
      //Label al inicio para que regrese
      String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
      Cuarteto inicioDeWhile=new Cuarteto("goto", null, null, label, TipoDeCuarteto.SOLO_ETIQUETA);
      editor.getManTablas().anadirCuarteto(inicioDeWhile);
      //Se analiza la expresion
      ManejadorDeDeclaraciones manejador = new ManejadorDeDeclaraciones(editor);
      Cuarteto[] cuartetos=manejador.evaluarExpresionDeCicloOCondicional(n1,ileft,iright);
      cuartetos[0]=inicioDeWhile;
      return cuartetos;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MAS,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MENOS,n1, n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.POR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= expresion DIV expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.DIV,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= expresion PORCENTAJE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.PORCENTAJE,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= MENOS PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.IDENTIFICADOR,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.TRUE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.FALSE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARACION_CARACTER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_CARACTER,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= NUMERO_ENTERO 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_ENTERO,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMERO_DECIMAL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMAL,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= NUMERO_DECIMALF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMALF,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= DECLARACION_STRING 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_STRING,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= IDENTIFICADOR PARENTESIS_ABIERTO listaDeParametros PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaDeParametros ::= listaDeParametros COMA miParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeParametros",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaDeParametros ::= miParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeParametros",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // miParametro ::= comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miParametro",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparacion ::= comparacion AND comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.AND,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparacion ::= comparacion OR comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.OR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparacion ::= NOT comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparacion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparacion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR_IGUAL,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR_IGUAL,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparacion ::= expresion DISTINTO_DE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.DISTINTO_DE,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion IGUAL_A expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.IGUAL_A,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDeVariable ::= STRING 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoDeVariable ::= BOOLEAN 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoDeVariable ::= CHAR 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoDeVariable ::= BYTE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BYTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoDeVariable ::= INT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoDeVariable ::= LONG 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.LONG;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoDeVariable ::= FLOAT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.FLOAT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoDeVariable ::= DOUBLE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoDeVariable ::= VOID 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= conjuntoDeDeclaraciones 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicio ::= conjuntoDeDeclaraciones conjuntoDeSubprogramas SEPARADOR funcionMain 
            {
              Object RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Nodo> declaraciones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio ::= conjuntoDeDeclaraciones SEPARADOR funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inicio ::= conjuntoDeSubprogramas SEPARADOR funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicio ::= SEPARADOR funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conjuntoDeDeclaraciones ::= conjuntoDeDeclaraciones unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conjuntoDeDeclaraciones ::= unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
   lista.add(n1);
   RESULT=lista;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unaDeclaracion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unaDeclaracion ::= asignacionDeVariable 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unaDeclaracion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArregloDeclaracion n1 = (NodoArregloDeclaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unaDeclaracion ::= asignacionDeArreglo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unaInstruccion ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unaInstruccion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoDeclaracion n1 = new NodoDeclaracion(tipo,lista);
man = new ManejadorDeDeclaraciones( n1,editor);
RESULT=n1;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> miLista = new LinkedList<>();
  miLista.add(n1);
  RESULT= miLista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,null,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,n1,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unaInstruccion ::= asignacionDeVariable 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION comparacion PCOMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoId nodo = new NodoId(i,n1,ileft,iright);
  man = new ManejadorDeDeclaraciones( nodo,editor);
  RESULT=nodo;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unaInstruccion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArregloDeclaracion n1 = (NodoArregloDeclaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracionDeArreglos ::= ARRAY tipoDeVariable conjuntoDeDimensiones conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              NodoArregloDeclaracion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> dimensiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaIdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaIdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<NodoId> listaIds = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
NodoArregloDeclaracion nodo = new NodoArregloDeclaracion( tipo, listaIds,dimensiones,ileft,iright);
man = new ManejadorDeDeclaraciones(nodo,editor);
RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conjuntoDeDimensiones ::= conjuntoDeDimensiones unaDimension 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conjuntoDeDimensiones ::= unaDimension 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
lista.add(n1);
RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unaDimension ::= CORCHETE_ABIERTO comparacion CORCHETE_CERRADO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDimension",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              LinkedList<NodoId> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<NodoId> lista = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId i = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(i);
RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              LinkedList<NodoId> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId n1 = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<NodoId> lista = new LinkedList<>();
    lista.add(n1);
    RESULT=lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              NodoId RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,null,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unaInstruccion ::= asignacionDeArreglo 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacionDeArreglo ::= IDENTIFICADOR conjuntoDeDimensiones ASIGNACION comparacion PCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Nodo> expresiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoAsignacionArreglo n1 = new NodoAsignacionArreglo(id,expresiones,expresion,idleft,idright);
  man = new ManejadorDeDeclaraciones( n1,editor);
  RESULT=n1;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Nodo RESULT =null;
		int cuartetosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuartetosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto[] cuartetos = (Cuarteto[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  if(cuartetos!=null){
    //Cuarteto que permite volver hacia arriba
    editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, cuartetos[0].getResultado(), TipoDeCuarteto.GOTOSALIDA));
    //Cuarteto que genera la etiqueta final
   editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, cuartetos[1].getResultado(), TipoDeCuarteto.SOLO_ETIQUETA));

  }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$0 ::= 
            {
              Cuarteto[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

  //Se crea la etiqueta que permitiria el ciclo
  String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
  Cuarteto inicioDeWhile=new Cuarteto("goto", null, null, label, TipoDeCuarteto.SOLO_ETIQUETA);
  editor.getManTablas().anadirCuarteto(inicioDeWhile);
  //Se analiza la expresion
  ManejadorDeDeclaraciones manejador = new ManejadorDeDeclaraciones(editor);
  Cuarteto[] cuartetos=manejador.evaluarExpresionDeCicloOCondicional(n1,ileft,iright);
  cuartetos[0]=inicioDeWhile;
  RESULT=cuartetos;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO NT$0 unaInstruccion 
            {
              Cuarteto[] RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Cuarteto[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$1 ::= 
            {
              Cuarteto[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

  //Se crea la etiqueta que permitiria el ciclo
  String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
  Cuarteto inicioDeWhile=new Cuarteto("goto", null, null, label, TipoDeCuarteto.SOLO_ETIQUETA);
  editor.getManTablas().anadirCuarteto(inicioDeWhile);
  //Se analiza la expresion
  ManejadorDeDeclaraciones manejador = new ManejadorDeDeclaraciones(editor);
  Cuarteto[] cuartetos=manejador.evaluarExpresionDeCicloOCondicional(n1,ileft,iright);
  cuartetos[0]=inicioDeWhile;
  RESULT=cuartetos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO NT$1 CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Cuarteto[] RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Cuarteto[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionDeEstructuraDoWhile ::= DO unaInstruccion WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracionDeEstructuraDoWhile ::= DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignacionParaFor ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionParaFor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracionDeFuncionesPredefinidas ::= SCANS CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracionDeFuncionesPredefinidas ::= SCANN CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conjuntoDeTexto ::= unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unTexto ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unaInstruccion ::= instruccionReturn 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruccionReturn ::= RETURN comparacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unaInstruccion ::= llamadaDeFuncion 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // llamadaDeFuncion ::= IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaDeFuncion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // conjuntoDeSubprogramas ::= conjuntoDeSubprogramas unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conjuntoDeSubprogramas ::= unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // conjuntoDeParametros ::= conjuntoDeParametros COMA unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conjuntoDeParametros ::= unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unParametro ::= tipoDeVariable IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones SEPARADOR conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpoDeFuncion ::= SEPARADOR conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpoDeFuncion ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funcionMain ::= MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
