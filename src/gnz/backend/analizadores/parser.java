
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import java_cup.runtime.*;
import gnz.backend.nodo.Nodo;
import gnz.backend.nodoExpresion.*;
import gnz.backend.nodoComparacion.*;
import gnz.backend.nodoDeclaracion.*;
import gnz.gui.frames.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\002\003\000" +
    "\002\002\010\000\002\002\007\000\002\002\007\000\002" +
    "\002\006\000\002\005\004\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\007\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\003\000\002" +
    "\012\005\000\002\004\003\000\002\016\006\000\002\004" +
    "\003\000\002\017\007\000\002\021\004\000\002\021\003" +
    "\000\002\022\005\000\002\023\005\000\002\023\003\000" +
    "\002\020\003\000\002\004\003\000\002\024\007\000\002" +
    "\004\003\000\002\025\007\000\002\025\011\000\002\004" +
    "\003\000\002\026\005\000\002\026\007\000\002\004\003" +
    "\000\002\027\004\000\002\027\006\000\002\027\010\000" +
    "\002\030\004\000\002\030\003\000\002\031\007\000\002" +
    "\031\011\000\002\004\003\000\002\032\007\000\002\032" +
    "\011\000\002\004\003\000\002\034\010\000\002\034\012" +
    "\000\002\004\003\000\002\036\013\000\002\036\015\000" +
    "\002\040\005\000\002\037\004\000\002\037\004\000\002" +
    "\004\003\000\002\041\007\000\002\041\007\000\002\041" +
    "\007\000\002\041\007\000\002\042\005\000\002\042\003" +
    "\000\002\043\003\000\002\044\004\000\002\044\003\000" +
    "\002\045\012\000\002\045\012\000\002\047\005\000\002" +
    "\047\003\000\002\047\002\000\002\050\004\000\002\052" +
    "\011\000\002\052\010\000\002\052\010\000\002\052\007" +
    "\000\002\051\007\000\002\051\006\000\002\051\006\000" +
    "\002\003\005\000\002\053\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\030\010\016\013\007\015\010\016\006\017" +
    "\004\020\021\021\026\025\020\033\013\060\025\065\024" +
    "\001\002\000\006\007\uffe2\047\uffe2\001\002\000\032\002" +
    "\uffd9\010\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\025\uffd9\033\uffd9\060\uffd9\065\uffd9\001\002\000" +
    "\006\007\uffe3\047\uffe3\001\002\000\006\007\uffe5\047\uffe5" +
    "\001\002\000\006\007\uffe4\047\uffe4\001\002\000\026\010" +
    "\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\025\uff9e\033\uff9e\065\uff9e\001\002\000\032\002\uffd7\010" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\025\uffd7\033\uffd7\060\uffd7\065\uffd7\001\002\000\004\033" +
    "\u0114\001\002\000\032\002\uffdf\010\016\013\007\015\010" +
    "\016\006\017\004\020\021\021\026\025\020\033\u010c\060" +
    "\025\065\024\001\002\000\004\007\u010a\001\002\000\006" +
    "\007\uffe6\047\uffe6\001\002\000\004\002\u0109\001\002\000" +
    "\006\007\uffe7\047\uffe7\001\002\000\006\007\uffe1\047\uffe1" +
    "\001\002\000\032\002\uffd8\010\uffd8\013\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\025\uffd8\033\uffd8\060\uffd8" +
    "\065\uffd8\001\002\000\026\010\016\013\007\015\010\016" +
    "\006\017\004\020\021\021\026\025\020\033\345\065\024" +
    "\001\002\000\004\007\120\001\002\000\022\010\016\013" +
    "\007\015\010\016\006\017\004\020\021\021\026\025\020" +
    "\001\002\000\006\007\uffe0\047\uffe0\001\002\000\004\047" +
    "\031\001\002\000\010\005\uffc8\007\uffc8\047\uffc8\001\002" +
    "\000\030\007\056\011\044\012\051\014\052\022\045\023" +
    "\055\024\046\026\043\031\042\042\054\045\053\001\002" +
    "\000\006\007\034\047\031\001\002\000\010\005\uffc9\007" +
    "\uffc9\047\uffc9\001\002\000\006\004\uffc4\006\uffc4\001\002" +
    "\000\006\004\040\006\037\001\002\000\006\004\uffc5\006" +
    "\uffc5\001\002\000\004\007\034\001\002\000\066\002\uffca" +
    "\003\uffca\007\uffca\010\uffca\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\025\uffca\033\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002" +
    "\000\006\004\uffc6\006\uffc6\001\002\000\004\045\115\001" +
    "\002\000\046\004\ufff2\006\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\043\ufff2\044\ufff2\046\ufff2\050\ufff2\057\ufff2" +
    "\001\002\000\046\004\ufff8\006\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\057" +
    "\ufff8\001\002\000\046\004\ufff5\006\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\046\ufff5\050\ufff5" +
    "\057\ufff5\001\002\000\046\004\ufff3\006\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3\046\ufff3\050" +
    "\ufff3\057\ufff3\001\002\000\010\043\060\044\061\050\114" +
    "\001\002\000\046\004\uffe8\006\uffe8\027\065\030\071\031" +
    "\067\032\070\033\066\034\100\035\103\036\105\037\101" +
    "\040\102\041\104\043\uffe8\044\uffe8\046\uffe8\050\uffe8\057" +
    "\uffe8\001\002\000\046\004\ufff7\006\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\046\ufff7\050\ufff7" +
    "\057\ufff7\001\002\000\046\004\ufff6\006\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\046\ufff6\050" +
    "\ufff6\057\ufff6\001\002\000\026\007\056\011\044\012\051" +
    "\014\052\022\045\023\055\024\046\026\043\031\042\045" +
    "\053\001\002\000\030\007\056\011\044\012\051\014\052" +
    "\022\045\023\055\024\046\026\043\031\042\042\054\045" +
    "\053\001\002\000\046\004\ufff4\006\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\046\ufff4\050\ufff4" +
    "\057\ufff4\001\002\000\046\004\ufff9\006\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\046\ufff9\050" +
    "\ufff9\057\ufff9\001\002\000\020\004\uffef\006\uffef\043\uffef" +
    "\044\uffef\046\uffef\050\uffef\057\uffef\001\002\000\030\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\042\054\045\053\001\002\000\030\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\042\054\045\053\001\002\000\020\004" +
    "\ufff0\006\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\057\ufff0" +
    "\001\002\000\020\004\ufff1\006\ufff1\043\ufff1\044\ufff1\046" +
    "\ufff1\050\ufff1\057\ufff1\001\002\000\016\027\065\030\071" +
    "\031\067\032\070\033\066\046\072\001\002\000\026\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\045\053\001\002\000\026\007\056\011" +
    "\044\012\051\014\052\022\045\023\055\024\046\026\043" +
    "\031\042\045\053\001\002\000\026\007\056\011\044\012" +
    "\051\014\052\022\045\023\055\024\046\026\043\031\042" +
    "\045\053\001\002\000\026\007\056\011\044\012\051\014" +
    "\052\022\045\023\055\024\046\026\043\031\042\045\053" +
    "\001\002\000\026\007\056\011\044\012\051\014\052\022" +
    "\045\023\055\024\046\026\043\031\042\045\053\001\002" +
    "\000\046\004\ufffb\006\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\043\ufffb\044\ufffb\046\ufffb\050\ufffb\057\ufffb\001" +
    "\002\000\046\004\ufffe\006\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\043\ufffe\044\ufffe\046\ufffe\050\ufffe\057\ufffe" +
    "\001\002\000\046\004\ufffd\006\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\044\ufffd\046\ufffd\050\ufffd\057" +
    "\ufffd\001\002\000\046\004\uffff\006\uffff\027\uffff\030\071" +
    "\031\uffff\032\070\033\066\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\043\uffff\044\uffff\046\uffff\050\uffff" +
    "\057\uffff\001\002\000\046\004\ufffc\006\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\043\ufffc\044\ufffc\046\ufffc\050" +
    "\ufffc\057\ufffc\001\002\000\046\004\000\006\000\027\000" +
    "\030\071\031\000\032\070\033\066\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\043\000\044\000\046\000" +
    "\050\000\057\000\001\002\000\026\007\056\011\044\012" +
    "\051\014\052\022\045\023\055\024\046\026\043\031\042" +
    "\045\053\001\002\000\026\007\056\011\044\012\051\014" +
    "\052\022\045\023\055\024\046\026\043\031\042\045\053" +
    "\001\002\000\026\007\056\011\044\012\051\014\052\022" +
    "\045\023\055\024\046\026\043\031\042\045\053\001\002" +
    "\000\026\007\056\011\044\012\051\014\052\022\045\023" +
    "\055\024\046\026\043\031\042\045\053\001\002\000\026" +
    "\007\056\011\044\012\051\014\052\022\045\023\055\024" +
    "\046\026\043\031\042\045\053\001\002\000\026\007\056" +
    "\011\044\012\051\014\052\022\045\023\055\024\046\026" +
    "\043\031\042\045\053\001\002\000\032\004\uffec\006\uffec" +
    "\027\065\030\071\031\067\032\070\033\066\043\uffec\044" +
    "\uffec\046\uffec\050\uffec\057\uffec\001\002\000\032\004\uffe9" +
    "\006\uffe9\027\065\030\071\031\067\032\070\033\066\043" +
    "\uffe9\044\uffe9\046\uffe9\050\uffe9\057\uffe9\001\002\000\032" +
    "\004\uffed\006\uffed\027\065\030\071\031\067\032\070\033" +
    "\066\043\uffed\044\uffed\046\uffed\050\uffed\057\uffed\001\002" +
    "\000\032\004\uffea\006\uffea\027\065\030\071\031\067\032" +
    "\070\033\066\043\uffea\044\uffea\046\uffea\050\uffea\057\uffea" +
    "\001\002\000\032\004\uffeb\006\uffeb\027\065\030\071\031" +
    "\067\032\070\033\066\043\uffeb\044\uffeb\046\uffeb\050\uffeb" +
    "\057\uffeb\001\002\000\032\004\uffee\006\uffee\027\065\030" +
    "\071\031\067\032\070\033\066\043\uffee\044\uffee\046\uffee" +
    "\050\uffee\057\uffee\001\002\000\010\005\uffc7\007\uffc7\047" +
    "\uffc7\001\002\000\026\007\056\011\044\012\051\014\052" +
    "\022\045\023\055\024\046\026\043\031\042\045\053\001" +
    "\002\000\016\027\065\030\071\031\067\032\070\033\066" +
    "\046\117\001\002\000\046\004\ufffa\006\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\046\ufffa\050" +
    "\ufffa\057\ufffa\001\002\000\004\045\121\001\002\000\026" +
    "\006\uff99\010\016\013\007\015\010\016\006\017\004\020" +
    "\021\021\026\025\020\046\uff99\001\002\000\006\006\126" +
    "\046\127\001\002\000\006\006\uff9a\046\uff9a\001\002\000" +
    "\004\007\125\001\002\000\006\006\uff98\046\uff98\001\002" +
    "\000\022\010\016\013\007\015\010\016\006\017\004\020" +
    "\021\021\026\025\020\001\002\000\004\047\130\001\002" +
    "\000\026\010\016\013\007\015\010\016\006\017\004\020" +
    "\021\021\026\025\020\033\131\060\025\001\002\000\004" +
    "\033\341\001\002\000\004\050\340\001\002\000\004\007" +
    "\330\001\002\000\026\010\016\013\007\015\010\016\006" +
    "\017\004\020\021\021\026\025\020\033\135\060\025\001" +
    "\002\000\004\033\137\001\002\000\032\002\uffda\010\uffda" +
    "\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\025" +
    "\uffda\033\uffda\060\uffda\065\uffda\001\002\000\004\033\140" +
    "\001\002\000\054\003\155\007\157\010\016\013\007\015" +
    "\010\016\006\017\004\020\021\021\026\025\020\033\146" +
    "\050\uff92\051\145\054\143\055\150\056\163\060\025\061" +
    "\156\062\152\063\166\064\141\001\002\000\004\047\324" +
    "\001\002\000\052\003\155\007\157\010\016\013\007\015" +
    "\010\016\006\017\004\020\021\021\026\025\020\050\uff93" +
    "\051\145\054\143\055\150\056\163\060\025\061\156\062" +
    "\152\063\166\064\141\001\002\000\004\045\315\001\002" +
    "\000\060\003\uffc1\007\uffc1\010\uffc1\013\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\025\uffc1\050\uffc1\051\uffc1" +
    "\052\272\053\270\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\001\002\000\004" +
    "\045\261\001\002\000\004\033\257\001\002\000\060\003" +
    "\uffcb\007\uffcb\010\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\025\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\066\uffcb\001\002\000\052\003\155\007" +
    "\157\010\016\013\007\015\010\016\006\017\004\020\021" +
    "\021\026\025\020\047\244\051\145\054\143\055\150\056" +
    "\163\060\025\061\156\062\152\063\166\064\141\001\002" +
    "\000\060\003\uffd3\007\uffd3\010\uffd3\013\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\025\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\066\uffd3\001\002\000\004" +
    "\047\237\001\002\000\060\003\uffbb\007\uffbb\010\uffbb\013" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\025\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb" +
    "\001\002\000\060\003\uffc3\007\uffc3\010\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\025\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002" +
    "\000\060\003\uffd4\007\uffd4\010\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\025\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\001\002\000\004" +
    "\047\227\001\002\000\006\005\220\047\031\001\002\000" +
    "\060\003\uffad\007\uffad\010\uffad\013\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\025\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\066\uffad\001\002\000\060\003" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\025\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\066\uffbe\001\002\000\060\003\uffcd\007" +
    "\uffcd\010\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\025\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\066\uffcd\001\002\000\004\045\175\001\002\000" +
    "\060\003\uffa7\007\uffa7\010\uffa7\013\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\025\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\066\uffa7\001\002\000\054\003" +
    "\uffd5\007\uffd5\010\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\025\uffd5\050\uffd5\051\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\066\uffd5\001\002\000\004\047\171\001\002\000\060\003" +
    "\uffb3\007\uffb3\010\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\025\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\066\uffb3\001\002\000\060\003\uffb0\007" +
    "\uffb0\010\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\025\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\066\uffb0\001\002\000\004\007\172\001\002\000" +
    "\004\050\173\001\002\000\004\004\174\001\002\000\060" +
    "\003\uffa4\007\uffa4\010\uffa4\013\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\025\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\066\uffa4\001\002\000\004\007\177" +
    "\001\002\000\004\057\202\001\002\000\004\005\200\001" +
    "\002\000\030\007\056\011\044\012\051\014\052\022\045" +
    "\023\055\024\046\026\043\031\042\042\054\045\053\001" +
    "\002\000\010\043\060\044\061\057\uffaa\001\002\000\030" +
    "\007\056\011\044\012\051\014\052\022\045\023\055\024" +
    "\046\026\043\031\042\042\054\045\053\001\002\000\010" +
    "\043\060\044\061\057\204\001\002\000\006\027\205\031" +
    "\207\001\002\000\004\022\217\001\002\000\004\046\211" +
    "\001\002\000\004\022\210\001\002\000\004\046\uffa8\001" +
    "\002\000\052\003\155\007\157\010\016\013\007\015\010" +
    "\016\006\017\004\020\021\021\026\025\020\047\213\051" +
    "\145\054\143\055\150\056\163\060\025\061\156\062\152" +
    "\063\166\064\141\001\002\000\060\003\uffac\007\uffac\010" +
    "\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\025\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\066\uffac\001\002\000\052\003\155\007\157\010\016\013" +
    "\007\015\010\016\006\017\004\020\021\021\026\025\020" +
    "\033\146\051\145\054\143\055\150\056\163\060\025\061" +
    "\156\062\152\063\166\064\141\001\002\000\052\003\155" +
    "\007\157\010\016\013\007\015\010\016\006\017\004\020" +
    "\021\021\026\025\020\050\215\051\145\054\143\055\150" +
    "\056\163\060\025\061\156\062\152\063\166\064\141\001" +
    "\002\000\060\003\uffab\007\uffab\010\uffab\013\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\025\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\066\uffab\001\002\000" +
    "\054\003\uffd6\007\uffd6\010\uffd6\013\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\025\uffd6\050\uffd6\051\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\066\uffd6\001\002\000\004\046\uffa9\001\002\000" +
    "\030\007\056\011\044\012\051\014\052\022\045\023\055" +
    "\024\046\026\043\031\042\042\054\045\053\001\002\000" +
    "\006\005\222\047\031\001\002\000\030\007\056\011\044" +
    "\012\051\014\052\022\045\023\055\024\046\026\043\031" +
    "\042\042\054\045\053\001\002\000\010\004\224\043\060" +
    "\044\061\001\002\000\060\003\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2" +
    "\001\002\000\010\004\226\043\060\044\061\001\002\000" +
    "\060\003\uffcc\007\uffcc\010\uffcc\013\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\025\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\066\uffcc\001\002\000\026\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\045\053\001\002\000\006\006\uffa1\050" +
    "\uffa1\001\002\000\020\006\uffa0\027\065\030\071\031\067" +
    "\032\070\033\066\050\uffa0\001\002\000\006\006\233\050" +
    "\234\001\002\000\026\007\056\011\044\012\051\014\052" +
    "\022\045\023\055\024\046\026\043\031\042\045\053\001" +
    "\002\000\004\004\235\001\002\000\060\003\uffa5\007\uffa5" +
    "\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\025\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\066\uffa5\001\002\000\006\006\uffa2\050\uffa2\001\002" +
    "\000\026\007\056\011\044\012\051\014\052\022\045\023" +
    "\055\024\046\026\043\031\042\045\053\001\002\000\006" +
    "\006\233\050\241\001\002\000\004\004\242\001\002\000" +
    "\060\003\uffa6\007\uffa6\010\uffa6\013\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\025\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\066\uffa6\001\002\000\004\054" +
    "\253\001\002\000\052\003\155\007\157\010\016\013\007" +
    "\015\010\016\006\017\004\020\021\021\026\025\020\033" +
    "\146\051\145\054\143\055\150\056\163\060\025\061\156" +
    "\062\152\063\166\064\141\001\002\000\052\003\155\007" +
    "\157\010\016\013\007\015\010\016\006\017\004\020\021" +
    "\021\026\025\020\050\246\051\145\054\143\055\150\056" +
    "\163\060\025\061\156\062\152\063\166\064\141\001\002" +
    "\000\004\054\247\001\002\000\004\045\250\001\002\000" +
    "\030\007\056\011\044\012\051\014\052\022\045\023\055" +
    "\024\046\026\043\031\042\042\054\045\053\001\002\000" +
    "\010\043\060\044\061\046\252\001\002\000\060\003\uffae" +
    "\007\uffae\010\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\025\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\066\uffae\001\002\000\004\045\254\001\002" +
    "\000\030\007\056\011\044\012\051\014\052\022\045\023" +
    "\055\024\046\026\043\031\042\042\054\045\053\001\002" +
    "\000\010\043\060\044\061\046\256\001\002\000\060\003" +
    "\uffaf\007\uffaf\010\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\025\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\066\uffaf\001\002\000\004\033\260\001" +
    "\002\000\054\003\uff90\007\uff90\010\uff90\013\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\025\uff90\050\uff90\051" +
    "\uff90\054\uff90\055\uff90\056\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\064\uff90\066\uff90\001\002\000\030\007\056\011" +
    "\044\012\051\014\052\022\045\023\055\024\046\026\043" +
    "\031\042\042\054\045\053\001\002\000\010\043\060\044" +
    "\061\046\263\001\002\000\052\003\155\007\157\010\016" +
    "\013\007\015\010\016\006\017\004\020\021\021\026\025" +
    "\020\047\265\051\145\054\143\055\150\056\163\060\025" +
    "\061\156\062\152\063\166\064\141\001\002\000\060\003" +
    "\uffc0\007\uffc0\010\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\025\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\066\uffc0\001\002\000\052\003\155\007" +
    "\157\010\016\013\007\015\010\016\006\017\004\020\021" +
    "\021\026\025\020\033\146\051\145\054\143\055\150\056" +
    "\163\060\025\061\156\062\152\063\166\064\141\001\002" +
    "\000\052\003\155\007\157\010\016\013\007\015\010\016" +
    "\006\017\004\020\021\021\026\025\020\050\267\051\145" +
    "\054\143\055\150\056\163\060\025\061\156\062\152\063" +
    "\166\064\141\001\002\000\060\003\uffbf\007\uffbf\010\uffbf" +
    "\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\025" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\066" +
    "\uffbf\001\002\000\052\003\155\007\157\010\016\013\007" +
    "\015\010\016\006\017\004\020\021\021\026\025\020\047" +
    "\312\051\145\054\143\055\150\056\163\060\025\061\156" +
    "\062\152\063\166\064\141\001\002\000\060\003\uffba\007" +
    "\uffba\010\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\025\uffba\050\uffba\051\uffba\052\272\053\303\054" +
    "\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\066\uffba\001\002\000\004\045\274\001\002\000" +
    "\060\003\uffb6\007\uffb6\010\uffb6\013\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\025\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\066\uffb6\001\002\000\030\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\042\054\045\053\001\002\000\010\043" +
    "\060\044\061\046\276\001\002\000\052\003\155\007\157" +
    "\010\016\013\007\015\010\016\006\017\004\020\021\021" +
    "\026\025\020\047\300\051\145\054\143\055\150\056\163" +
    "\060\025\061\156\062\152\063\166\064\141\001\002\000" +
    "\060\003\uffb5\007\uffb5\010\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\025\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\066\uffb5\001\002\000\052\003" +
    "\155\007\157\010\016\013\007\015\010\016\006\017\004" +
    "\020\021\021\026\025\020\033\146\051\145\054\143\055" +
    "\150\056\163\060\025\061\156\062\152\063\166\064\141" +
    "\001\002\000\052\003\155\007\157\010\016\013\007\015" +
    "\010\016\006\017\004\020\021\021\026\025\020\050\302" +
    "\051\145\054\143\055\150\056\163\060\025\061\156\062" +
    "\152\063\166\064\141\001\002\000\060\003\uffb4\007\uffb4" +
    "\010\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\025\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\066\uffb4\001\002\000\052\003\155\007\157\010\016" +
    "\013\007\015\010\016\006\017\004\020\021\021\026\025" +
    "\020\047\306\051\145\054\143\055\150\056\163\060\025" +
    "\061\156\062\152\063\166\064\141\001\002\000\060\003" +
    "\uffb7\007\uffb7\010\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\025\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\066\uffb7\001\002\000\060\003\uffb9\007" +
    "\uffb9\010\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\025\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\066\uffb9\001\002\000\052\003\155\007\157\010" +
    "\016\013\007\015\010\016\006\017\004\020\021\021\026" +
    "\025\020\033\146\051\145\054\143\055\150\056\163\060" +
    "\025\061\156\062\152\063\166\064\141\001\002\000\052" +
    "\003\155\007\157\010\016\013\007\015\010\016\006\017" +
    "\004\020\021\021\026\025\020\050\310\051\145\054\143" +
    "\055\150\056\163\060\025\061\156\062\152\063\166\064" +
    "\141\001\002\000\060\003\uffb8\007\uffb8\010\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\001" +
    "\002\000\060\003\uffbd\007\uffbd\010\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066\uffbd\001\002\000" +
    "\052\003\155\007\157\010\016\013\007\015\010\016\006" +
    "\017\004\020\021\021\026\025\020\033\146\051\145\054" +
    "\143\055\150\056\163\060\025\061\156\062\152\063\166" +
    "\064\141\001\002\000\052\003\155\007\157\010\016\013" +
    "\007\015\010\016\006\017\004\020\021\021\026\025\020" +
    "\050\314\051\145\054\143\055\150\056\163\060\025\061" +
    "\156\062\152\063\166\064\141\001\002\000\060\003\uffbc" +
    "\007\uffbc\010\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\025\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\066\uffbc\001\002\000\030\007\056\011\044" +
    "\012\051\014\052\022\045\023\055\024\046\026\043\031" +
    "\042\042\054\045\053\001\002\000\010\043\060\044\061" +
    "\046\317\001\002\000\052\003\155\007\157\010\016\013" +
    "\007\015\010\016\006\017\004\020\021\021\026\025\020" +
    "\047\321\051\145\054\143\055\150\056\163\060\025\061" +
    "\156\062\152\063\166\064\141\001\002\000\060\003\uffb2" +
    "\007\uffb2\010\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\025\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\066\uffb2\001\002\000\052\003\155\007\157" +
    "\010\016\013\007\015\010\016\006\017\004\020\021\021" +
    "\026\025\020\033\146\051\145\054\143\055\150\056\163" +
    "\060\025\061\156\062\152\063\166\064\141\001\002\000" +
    "\052\003\155\007\157\010\016\013\007\015\010\016\006" +
    "\017\004\020\021\021\026\025\020\050\323\051\145\054" +
    "\143\055\150\056\163\060\025\061\156\062\152\063\166" +
    "\064\141\001\002\000\060\003\uffb1\007\uffb1\010\uffb1\013" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1" +
    "\001\002\000\004\007\325\001\002\000\004\050\326\001" +
    "\002\000\004\004\327\001\002\000\060\003\uffa3\007\uffa3" +
    "\010\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\025\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\066\uffa3\001\002\000\010\004\uffcf\005\336\006\uffcf" +
    "\001\002\000\006\004\uffd0\006\uffd0\001\002\000\006\004" +
    "\334\006\333\001\002\000\004\007\330\001\002\000\066" +
    "\002\uffd2\003\uffd2\007\uffd2\010\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\025\uffd2\033\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\001\002\000\006\004\uffd1\006\uffd1\001\002\000\030\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\042\054\045\053\001\002\000\012\004" +
    "\uffce\006\uffce\043\060\044\061\001\002\000\026\010\uff9c" +
    "\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\025" +
    "\uff9c\033\uff9c\065\uff9c\001\002\000\004\033\342\001\002" +
    "\000\052\003\155\007\157\010\016\013\007\015\010\016" +
    "\006\017\004\020\021\021\026\025\020\033\146\051\145" +
    "\054\143\055\150\056\163\060\025\061\156\062\152\063" +
    "\166\064\141\001\002\000\052\003\155\007\157\010\016" +
    "\013\007\015\010\016\006\017\004\020\021\021\026\025" +
    "\020\050\uff91\051\145\054\143\055\150\056\163\060\025" +
    "\061\156\062\152\063\166\064\141\001\002\000\006\006" +
    "\uff9b\046\uff9b\001\002\000\004\033\u0100\001\002\000\026" +
    "\010\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\025\uff9f\033\uff9f\065\uff9f\001\002\000\004\007\350" +
    "\001\002\000\004\045\351\001\002\000\026\006\uff99\010" +
    "\016\013\007\015\010\016\006\017\004\020\021\021\026" +
    "\025\020\046\uff99\001\002\000\006\006\126\046\353\001" +
    "\002\000\004\047\354\001\002\000\026\010\016\013\007" +
    "\015\010\016\006\017\004\020\021\021\026\025\020\033" +
    "\356\060\025\001\002\000\004\050\377\001\002\000\004" +
    "\033\370\001\002\000\026\010\016\013\007\015\010\016" +
    "\006\017\004\020\021\021\026\025\020\033\360\060\025" +
    "\001\002\000\004\033\361\001\002\000\004\033\362\001" +
    "\002\000\054\003\155\007\157\010\016\013\007\015\010" +
    "\016\006\017\004\020\021\021\026\025\020\033\146\051" +
    "\145\054\143\055\150\056\163\060\025\061\156\062\152" +
    "\063\166\064\141\066\364\001\002\000\052\003\155\007" +
    "\157\010\016\013\007\015\010\016\006\017\004\020\021" +
    "\021\026\025\020\051\145\054\143\055\150\056\163\060" +
    "\025\061\156\062\152\063\166\064\141\066\366\001\002" +
    "\000\030\007\056\011\044\012\051\014\052\022\045\023" +
    "\055\024\046\026\043\031\042\042\054\045\053\001\002" +
    "\000\010\043\060\044\061\050\uff96\001\002\000\030\007" +
    "\056\011\044\012\051\014\052\022\045\023\055\024\046" +
    "\026\043\031\042\042\054\045\053\001\002\000\010\043" +
    "\060\044\061\050\uff97\001\002\000\004\033\371\001\002" +
    "\000\054\003\155\007\157\010\016\013\007\015\010\016" +
    "\006\017\004\020\021\021\026\025\020\033\146\051\145" +
    "\054\143\055\150\056\163\060\025\061\156\062\152\063" +
    "\166\064\141\066\373\001\002\000\052\003\155\007\157" +
    "\010\016\013\007\015\010\016\006\017\004\020\021\021" +
    "\026\025\020\051\145\054\143\055\150\056\163\060\025" +
    "\061\156\062\152\063\166\064\141\066\375\001\002\000" +
    "\030\007\056\011\044\012\051\014\052\022\045\023\055" +
    "\024\046\026\043\031\042\042\054\045\053\001\002\000" +
    "\010\043\060\044\061\050\uff94\001\002\000\030\007\056" +
    "\011\044\012\051\014\052\022\045\023\055\024\046\026" +
    "\043\031\042\042\054\045\053\001\002\000\010\043\060" +
    "\044\061\050\uff95\001\002\000\026\010\uff9d\013\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\025\uff9d\033\uff9d" +
    "\065\uff9d\001\002\000\004\033\u0101\001\002\000\004\067" +
    "\u0103\001\002\000\004\002\uffdc\001\002\000\004\045\u0104" +
    "\001\002\000\004\046\u0105\001\002\000\004\047\u0106\001" +
    "\002\000\052\003\155\007\157\010\016\013\007\015\010" +
    "\016\006\017\004\020\021\021\026\025\020\033\146\051" +
    "\145\054\143\055\150\056\163\060\025\061\156\062\152" +
    "\063\166\064\141\001\002\000\052\003\155\007\157\010" +
    "\016\013\007\015\010\016\006\017\004\020\021\021\026" +
    "\025\020\050\u0108\051\145\054\143\055\150\056\163\060" +
    "\025\061\156\062\152\063\166\064\141\001\002\000\004" +
    "\002\uff8f\001\002\000\004\002\001\001\002\000\012\004" +
    "\uffcf\005\336\006\uffcf\045\351\001\002\000\026\010\016" +
    "\013\007\015\010\016\006\017\004\020\021\021\026\025" +
    "\020\033\u0110\065\024\001\002\000\004\033\u010d\001\002" +
    "\000\004\033\u010e\001\002\000\004\067\u0103\001\002\000" +
    "\004\002\uffdd\001\002\000\004\033\u0111\001\002\000\004" +
    "\033\u0112\001\002\000\004\067\u0103\001\002\000\004\002" +
    "\uffde\001\002\000\004\033\u0115\001\002\000\004\067\u0103" +
    "\001\002\000\004\002\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\022\002\016\005\013\006\004\007\021\010" +
    "\014\017\011\044\022\045\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\135\007\021\010\014\017\011\044" +
    "\u010a\045\010\001\001\000\006\011\331\012\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\346\045\345" +
    "\001\001\000\002\001\001\000\004\010\026\001\001\000" +
    "\002\001\001\000\006\021\031\022\027\001\001\000\002" +
    "\001\001\000\006\013\047\014\046\001\001\000\010\020" +
    "\035\022\032\023\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\063\001" +
    "\001\000\006\013\047\014\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\047\014" +
    "\062\001\001\000\006\013\047\014\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\076\001\001\000\004\013\075\001\001\000\004\013\074" +
    "\001\001\000\004\013\073\001\001\000\004\013\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\112\001\001\000\004\013\111\001\001\000\004" +
    "\013\110\001\001\000\004\013\107\001\001\000\004\013" +
    "\106\001\001\000\004\013\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\123\047\121\050\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\123\050\343\001\001\000\002" +
    "\001\001\000\016\005\133\006\004\007\021\010\132\017" +
    "\011\051\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\331\012\330\001\001\000\012\006\135\007" +
    "\021\010\132\017\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\141\004\164\007" +
    "\150\010\132\016\161\017\146\024\153\025\143\026\160" +
    "\027\152\032\166\034\167\036\157\041\163\001\001\000" +
    "\002\001\001\000\034\004\215\007\150\010\132\016\161" +
    "\017\146\024\153\025\143\026\160\027\152\032\166\034" +
    "\167\036\157\041\163\001\001\000\002\001\001\000\006" +
    "\030\270\031\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\242\007\150\010\132" +
    "\016\161\017\146\024\153\025\143\026\160\027\152\032" +
    "\166\034\167\036\157\041\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\220\022\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\047\014\200\001\001\000\002" +
    "\001\001\000\006\013\047\014\202\001\001\000\002\001" +
    "\001\000\004\037\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\211\007\150\010\132\016\161\017\146\024\153\025\143" +
    "\026\160\027\152\032\166\034\167\036\157\041\163\001" +
    "\001\000\002\001\001\000\036\003\213\004\164\007\150" +
    "\010\132\016\161\017\146\024\153\025\143\026\160\027" +
    "\152\032\166\034\167\036\157\041\163\001\001\000\034" +
    "\004\215\007\150\010\132\016\161\017\146\024\153\025" +
    "\143\026\160\027\152\032\166\034\167\036\157\041\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\047\014\224\001\001\000\004\022\032" +
    "\001\001\000\006\013\047\014\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\230\042\231\043\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\230" +
    "\043\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\230\042\237\043\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\244\004\164\007\150\010\132" +
    "\016\161\017\146\024\153\025\143\026\160\027\152\032" +
    "\166\034\167\036\157\041\163\001\001\000\034\004\215" +
    "\007\150\010\132\016\161\017\146\024\153\025\143\026" +
    "\160\027\152\032\166\034\167\036\157\041\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\047\014" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\047\014\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\047\014\261\001\001\000\002\001\001\000" +
    "\034\004\263\007\150\010\132\016\161\017\146\024\153" +
    "\025\143\026\160\027\152\032\166\034\167\036\157\041" +
    "\163\001\001\000\002\001\001\000\036\003\265\004\164" +
    "\007\150\010\132\016\161\017\146\024\153\025\143\026" +
    "\160\027\152\032\166\034\167\036\157\041\163\001\001" +
    "\000\034\004\215\007\150\010\132\016\161\017\146\024" +
    "\153\025\143\026\160\027\152\032\166\034\167\036\157" +
    "\041\163\001\001\000\002\001\001\000\034\004\310\007" +
    "\150\010\132\016\161\017\146\024\153\025\143\026\160" +
    "\027\152\032\166\034\167\036\157\041\163\001\001\000" +
    "\004\031\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\047\014\274\001\001\000\002\001\001\000" +
    "\034\004\276\007\150\010\132\016\161\017\146\024\153" +
    "\025\143\026\160\027\152\032\166\034\167\036\157\041" +
    "\163\001\001\000\002\001\001\000\036\003\300\004\164" +
    "\007\150\010\132\016\161\017\146\024\153\025\143\026" +
    "\160\027\152\032\166\034\167\036\157\041\163\001\001" +
    "\000\034\004\215\007\150\010\132\016\161\017\146\024" +
    "\153\025\143\026\160\027\152\032\166\034\167\036\157" +
    "\041\163\001\001\000\002\001\001\000\034\004\304\007" +
    "\150\010\132\016\161\017\146\024\153\025\143\026\160" +
    "\027\152\032\166\034\167\036\157\041\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\306\004\164" +
    "\007\150\010\132\016\161\017\146\024\153\025\143\026" +
    "\160\027\152\032\166\034\167\036\157\041\163\001\001" +
    "\000\034\004\215\007\150\010\132\016\161\017\146\024" +
    "\153\025\143\026\160\027\152\032\166\034\167\036\157" +
    "\041\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\312\004\164\007\150\010\132\016\161\017\146" +
    "\024\153\025\143\026\160\027\152\032\166\034\167\036" +
    "\157\041\163\001\001\000\034\004\215\007\150\010\132" +
    "\016\161\017\146\024\153\025\143\026\160\027\152\032" +
    "\166\034\167\036\157\041\163\001\001\000\002\001\001" +
    "\000\006\013\047\014\315\001\001\000\002\001\001\000" +
    "\034\004\317\007\150\010\132\016\161\017\146\024\153" +
    "\025\143\026\160\027\152\032\166\034\167\036\157\041" +
    "\163\001\001\000\002\001\001\000\036\003\321\004\164" +
    "\007\150\010\132\016\161\017\146\024\153\025\143\026" +
    "\160\027\152\032\166\034\167\036\157\041\163\001\001" +
    "\000\034\004\215\007\150\010\132\016\161\017\146\024" +
    "\153\025\143\026\160\027\152\032\166\034\167\036\157" +
    "\041\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\047\014\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\342\004\164\007\150" +
    "\010\132\016\161\017\146\024\153\025\143\026\160\027" +
    "\152\032\166\034\167\036\157\041\163\001\001\000\034" +
    "\004\215\007\150\010\132\016\161\017\146\024\153\025" +
    "\143\026\160\027\152\032\166\034\167\036\157\041\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\123" +
    "\047\351\050\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\356\006\004\007\021\010\132\017\011" +
    "\052\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\135\007\021\010\132\017\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\362\004\164\007" +
    "\150\010\132\016\161\017\146\024\153\025\143\026\160" +
    "\027\152\032\166\034\167\036\157\041\163\001\001\000" +
    "\034\004\215\007\150\010\132\016\161\017\146\024\153" +
    "\025\143\026\160\027\152\032\166\034\167\036\157\041" +
    "\163\001\001\000\006\013\047\014\364\001\001\000\002" +
    "\001\001\000\006\013\047\014\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\371\004\164\007\150" +
    "\010\132\016\161\017\146\024\153\025\143\026\160\027" +
    "\152\032\166\034\167\036\157\041\163\001\001\000\034" +
    "\004\215\007\150\010\132\016\161\017\146\024\153\025" +
    "\143\026\160\027\152\032\166\034\167\036\157\041\163" +
    "\001\001\000\006\013\047\014\373\001\001\000\002\001" +
    "\001\000\006\013\047\014\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u0106\004\164\007\150\010" +
    "\132\016\161\017\146\024\153\025\143\026\160\027\152" +
    "\032\166\034\167\036\157\041\163\001\001\000\034\004" +
    "\215\007\150\010\132\016\161\017\146\024\153\025\143" +
    "\026\160\027\152\032\166\034\167\036\157\041\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\346\045\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u0115" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private EditorDeTextoFrame editor;

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor){
        super(lex);
        this.editor=editor;
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
 }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MAS,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MENOS,n1, n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.POR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= expresion DIV expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.DIV,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= expresion PORCENTAJE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.PORCENTAJE,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= MENOS PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.IDENTIFICADOR,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.TRUE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.FALSE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARACION_CARACTER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_CARACTER,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= NUMERO_ENTERO 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_ENTERO,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMERO_DECIMAL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMAL,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= NUMERO_DECIMALF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMALF,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= DECLARACION_STRING 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_STRING,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comparacion ::= comparacion AND comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.AND,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comparacion ::= comparacion OR comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.OR,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comparacion ::= NOT comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comparacion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comparacion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR_IGUAL,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR_IGUAL,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparacion ::= expresion DISTINTO_DE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.DISTINTO_DE,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparacion ::= expresion IGUAL_A expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.IGUAL_A,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparacion ::= expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoDeVariable ::= STRING 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDeVariable ::= BOOLEAN 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDeVariable ::= CHAR 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDeVariable ::= BYTE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BYTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDeVariable ::= INT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDeVariable ::= LONG 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.LONG;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoDeVariable ::= FLOAT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.FLOAT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoDeVariable ::= DOUBLE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= conjuntoDeDeclaraciones 
            {
              Object RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> declaraciones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ManejadorDeDeclaraciones man = new ManejadorDeDeclaraciones(declaraciones,editor);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= conjuntoDeDeclaraciones conjuntoDeSubprogramas PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= conjuntoDeSubprogramas PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conjuntoDeDeclaraciones ::= conjuntoDeDeclaraciones unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjuntoDeDeclaraciones ::= unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
   lista.add(n1);
   RESULT=lista;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unaDeclaracion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unaDeclaracion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unaInstruccion ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unaInstruccion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new NodoDeclaracion(tipo,lista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> miLista = new LinkedList<>();
  miLista.add(n1);
  RESULT= miLista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,null,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,n1,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unaInstruccion ::= asignacionDeVariable 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION comparacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unaInstruccion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracionDeArreglos ::= ARRAY tipoDeVariable conjuntoDeDimensiones conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conjuntoDeDimensiones ::= conjuntoDeDimensiones unaDimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuntoDeDimensiones ::= unaDimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unaDimension ::= CORCHETE_ABIERTO comparacion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDimension",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unaInstruccion ::= asignacionDeArreglo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacionDeArreglo ::= IDENTIFICADOR conjuntoDeDimensiones ASIGNACION comparacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracionDeEstructuraDoWhile ::= DO unaInstruccion WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracionDeEstructuraDoWhile ::= DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacionParaFor ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionParaFor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracionDeFuncionesPredefinidas ::= SCANS CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracionDeFuncionesPredefinidas ::= SCANN CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conjuntoDeTexto ::= unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unTexto ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conjuntoDeSubprogramas ::= conjuntoDeSubprogramas unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conjuntoDeSubprogramas ::= unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncionReturn CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unSubPrograma ::= VOID IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conjuntoDeParametros ::= conjuntoDeParametros COMA unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conjuntoDeParametros ::= unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conjuntoDeParametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unParametro ::= tipoDeVariable IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpoDeFuncionReturn ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpoDeFuncionReturn ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpoDeFuncionReturn ::= PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpoDeFuncionReturn ::= PORCENTAJE PORCENTAJE PORCENTAJE RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpoDeFuncion ::= PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conjuntoDeInstrucciones ::= PORCENTAJE PORCENTAJE PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcionMain ::= MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
