
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\002\010\000" +
    "\002\002\007\000\002\002\007\000\002\002\006\000\002" +
    "\005\004\000\002\005\003\000\002\006\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\007\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\012\005\000\002\004\003\000\002" +
    "\016\006\000\002\004\003\000\002\017\007\000\002\021" +
    "\004\000\002\021\003\000\002\022\005\000\002\023\005" +
    "\000\002\023\003\000\002\020\003\000\002\004\003\000" +
    "\002\024\007\000\002\004\003\000\002\025\007\000\002" +
    "\025\011\000\002\004\003\000\002\026\005\000\002\026" +
    "\007\000\002\004\003\000\002\027\004\000\002\027\006" +
    "\000\002\027\010\000\002\030\004\000\002\030\003\000" +
    "\002\031\007\000\002\031\011\000\002\004\003\000\002" +
    "\032\007\000\002\032\011\000\002\004\003\000\002\034" +
    "\010\000\002\034\012\000\002\004\003\000\002\036\013" +
    "\000\002\036\015\000\002\040\005\000\002\037\004\000" +
    "\002\037\004\000\002\004\003\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\041\007\000\002\042" +
    "\005\000\002\042\003\000\002\043\003\000\002\044\004" +
    "\000\002\044\003\000\002\045\012\000\002\045\012\000" +
    "\002\047\005\000\002\047\003\000\002\047\002\000\002" +
    "\050\004\000\002\052\011\000\002\052\010\000\002\052" +
    "\010\000\002\052\007\000\002\051\007\000\002\051\006" +
    "\000\002\051\006\000\002\003\005\000\002\053\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\026\010\010\013\024\015\017\016\005\017" +
    "\006\020\023\021\015\025\013\033\014\065\011\001\002" +
    "\000\026\010\010\013\024\015\017\016\005\017\006\020" +
    "\023\021\015\025\013\033\u0112\065\011\001\002\000\006" +
    "\007\uffe3\047\uffe3\001\002\000\006\007\uffe2\047\uffe2\001" +
    "\002\000\026\010\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\025\uffd9\033\uffd9\065\uffd9\001\002\000" +
    "\006\007\uffe6\047\uffe6\001\002\000\004\007\u0102\001\002" +
    "\000\004\002\u0101\001\002\000\006\007\uffe7\047\uffe7\001" +
    "\002\000\004\033\376\001\002\000\006\007\uffe0\047\uffe0" +
    "\001\002\000\026\010\uffa0\013\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\025\uffa0\033\uffa0\065\uffa0\001\002" +
    "\000\006\007\uffe4\047\uffe4\001\002\000\026\010\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\025\uffda" +
    "\033\uffda\065\uffda\001\002\000\004\007\375\001\002\000" +
    "\026\010\010\013\024\015\017\016\005\017\006\020\023" +
    "\021\015\025\013\033\026\065\011\001\002\000\006\007" +
    "\uffe1\047\uffe1\001\002\000\006\007\uffe5\047\uffe5\001\002" +
    "\000\026\010\010\013\024\015\017\016\005\017\006\020" +
    "\023\021\015\025\013\033\332\065\011\001\002\000\004" +
    "\033\030\001\002\000\026\010\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\025\uffdb\033\uffdb\065\uffdb" +
    "\001\002\000\004\033\031\001\002\000\004\067\033\001" +
    "\002\000\004\002\uffde\001\002\000\004\045\034\001\002" +
    "\000\004\046\035\001\002\000\004\047\036\001\002\000" +
    "\052\003\055\007\056\010\010\013\024\015\017\016\005" +
    "\017\006\020\023\021\015\025\013\033\044\051\043\054" +
    "\041\055\046\056\061\060\065\061\054\062\051\063\066" +
    "\064\037\001\002\000\004\047\326\001\002\000\052\003" +
    "\055\007\056\010\010\013\024\015\017\016\005\017\006" +
    "\020\023\021\015\025\013\050\325\051\043\054\041\055" +
    "\046\056\061\060\065\061\054\062\051\063\066\064\037" +
    "\001\002\000\004\045\316\001\002\000\060\003\uffc3\007" +
    "\uffc3\010\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\025\uffc3\050\uffc3\051\uffc3\052\273\053\271\054" +
    "\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\066\uffc3\001\002\000\004\045\262\001\002\000" +
    "\004\033\260\001\002\000\060\003\uffcd\007\uffcd\010\uffcd" +
    "\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\025" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\001\002\000\052\003\055\007\056\010\010\013\024" +
    "\015\017\016\005\017\006\020\023\021\015\025\013\047" +
    "\245\051\043\054\041\055\046\056\061\060\065\061\054" +
    "\062\051\063\066\064\037\001\002\000\004\007\234\001" +
    "\002\000\060\003\uffd5\007\uffd5\010\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\025\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\066\uffd5\001\002\000" +
    "\004\047\230\001\002\000\060\003\uffbd\007\uffbd\010\uffbd" +
    "\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066" +
    "\uffbd\001\002\000\060\003\uffc5\007\uffc5\010\uffc5\013\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\001" +
    "\002\000\004\047\220\001\002\000\060\003\uffd6\007\uffd6" +
    "\010\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\025\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\066\uffd6\001\002\000\006\005\211\047\077\001\002" +
    "\000\060\003\uffaf\007\uffaf\010\uffaf\013\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\025\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\001\002\000\060" +
    "\003\uffc0\007\uffc0\010\uffc0\013\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\025\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\066\uffc0\001\002\000\004\045\166" +
    "\001\002\000\060\003\uffcf\007\uffcf\010\uffcf\013\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\025\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf\001\002" +
    "\000\060\003\uffa9\007\uffa9\010\uffa9\013\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\025\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\001\002\000\054" +
    "\003\uffd7\007\uffd7\010\uffd7\013\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\025\uffd7\050\uffd7\051\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\066\uffd7\001\002\000\022\010\010\013\024\015\017" +
    "\016\005\017\006\020\023\021\015\025\013\001\002\000" +
    "\004\047\071\001\002\000\060\003\uffb5\007\uffb5\010\uffb5" +
    "\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\066" +
    "\uffb5\001\002\000\060\003\uffb2\007\uffb2\010\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\066\uffb2\001" +
    "\002\000\004\007\072\001\002\000\004\050\073\001\002" +
    "\000\004\004\074\001\002\000\060\003\uffa6\007\uffa6\010" +
    "\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\025\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\066\uffa6\001\002\000\004\047\077\001\002\000\010\005" +
    "\uffca\007\uffca\047\uffca\001\002\000\030\007\124\011\112" +
    "\012\116\014\120\022\113\023\123\024\114\026\111\031" +
    "\110\042\122\045\121\001\002\000\006\007\102\047\077" +
    "\001\002\000\010\005\uffcb\007\uffcb\047\uffcb\001\002\000" +
    "\006\004\uffc6\006\uffc6\001\002\000\006\004\106\006\105" +
    "\001\002\000\006\004\uffc7\006\uffc7\001\002\000\004\007" +
    "\102\001\002\000\060\003\uffcc\007\uffcc\010\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\025\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\001" +
    "\002\000\006\004\uffc8\006\uffc8\001\002\000\004\045\163" +
    "\001\002\000\046\004\ufff3\006\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\043\ufff3\044\ufff3\046\ufff3\050\ufff3\057" +
    "\ufff3\001\002\000\046\004\ufff9\006\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\046\ufff9\050\ufff9" +
    "\057\ufff9\001\002\000\046\004\ufff6\006\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\046\ufff6\050" +
    "\ufff6\057\ufff6\001\002\000\046\004\ufff4\006\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\046\ufff4" +
    "\050\ufff4\057\ufff4\001\002\000\010\043\126\044\127\050" +
    "\162\001\002\000\046\004\ufff8\006\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8" +
    "\057\ufff8\001\002\000\046\004\uffe8\006\uffe8\027\142\030" +
    "\137\031\134\032\144\033\141\034\135\035\143\036\146" +
    "\037\136\040\140\041\145\043\uffe8\044\uffe8\046\uffe8\050" +
    "\uffe8\057\uffe8\001\002\000\046\004\ufff7\006\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\046\ufff7" +
    "\050\ufff7\057\ufff7\001\002\000\030\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\042\122\045\121\001\002\000\030\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\042\122\045\121\001\002\000\046\004\ufff5\006\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\046" +
    "\ufff5\050\ufff5\057\ufff5\001\002\000\046\004\ufffa\006\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa" +
    "\046\ufffa\050\ufffa\057\ufffa\001\002\000\020\004\ufff0\006" +
    "\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\057\ufff0\001\002" +
    "\000\030\007\124\011\112\012\116\014\120\022\113\023" +
    "\123\024\114\026\111\031\110\042\122\045\121\001\002" +
    "\000\030\007\124\011\112\012\116\014\120\022\113\023" +
    "\123\024\114\026\111\031\110\042\122\045\121\001\002" +
    "\000\020\004\ufff1\006\ufff1\043\ufff1\044\ufff1\046\ufff1\050" +
    "\ufff1\057\ufff1\001\002\000\020\004\ufff2\006\ufff2\043\ufff2" +
    "\044\ufff2\046\ufff2\050\ufff2\057\ufff2\001\002\000\010\043" +
    "\126\044\127\046\133\001\002\000\020\004\uffef\006\uffef" +
    "\043\uffef\044\uffef\046\uffef\050\uffef\057\uffef\001\002\000" +
    "\024\007\124\011\112\012\116\014\120\022\113\023\123" +
    "\024\114\026\111\031\110\001\002\000\024\007\124\011" +
    "\112\012\116\014\120\022\113\023\123\024\114\026\111" +
    "\031\110\001\002\000\024\007\124\011\112\012\116\014" +
    "\120\022\113\023\123\024\114\026\111\031\110\001\002" +
    "\000\024\007\124\011\112\012\116\014\120\022\113\023" +
    "\123\024\114\026\111\031\110\001\002\000\024\007\124" +
    "\011\112\012\116\014\120\022\113\023\123\024\114\026" +
    "\111\031\110\001\002\000\024\007\124\011\112\012\116" +
    "\014\120\022\113\023\123\024\114\026\111\031\110\001" +
    "\002\000\024\007\124\011\112\012\116\014\120\022\113" +
    "\023\123\024\114\026\111\031\110\001\002\000\024\007" +
    "\124\011\112\012\116\014\120\022\113\023\123\024\114" +
    "\026\111\031\110\001\002\000\024\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\001\002\000\024\007\124\011\112\012\116\014\120\022" +
    "\113\023\123\024\114\026\111\031\110\001\002\000\024" +
    "\007\124\011\112\012\116\014\120\022\113\023\123\024" +
    "\114\026\111\031\110\001\002\000\032\004\uffec\006\uffec" +
    "\027\142\030\137\031\134\032\144\033\141\043\uffec\044" +
    "\uffec\046\uffec\050\uffec\057\uffec\001\002\000\032\004\uffe9" +
    "\006\uffe9\027\142\030\137\031\134\032\144\033\141\043" +
    "\uffe9\044\uffe9\046\uffe9\050\uffe9\057\uffe9\001\002\000\046" +
    "\004\ufffd\006\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\043\ufffd\044\ufffd\046\ufffd\050\ufffd\057\ufffd\001\002\000" +
    "\032\004\uffed\006\uffed\027\142\030\137\031\134\032\144" +
    "\033\141\043\uffed\044\uffed\046\uffed\050\uffed\057\uffed\001" +
    "\002\000\046\004\000\006\000\027\000\030\137\031\000" +
    "\032\144\033\141\034\000\035\000\036\000\037\000\040" +
    "\000\041\000\043\000\044\000\046\000\050\000\057\000" +
    "\001\002\000\046\004\ufffc\006\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\043\ufffc\044\ufffc\046\ufffc\050\ufffc\057" +
    "\ufffc\001\002\000\032\004\uffea\006\uffea\027\142\030\137" +
    "\031\134\032\144\033\141\043\uffea\044\uffea\046\uffea\050" +
    "\uffea\057\uffea\001\002\000\046\004\ufffe\006\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\044\ufffe\046\ufffe" +
    "\050\ufffe\057\ufffe\001\002\000\032\004\uffeb\006\uffeb\027" +
    "\142\030\137\031\134\032\144\033\141\043\uffeb\044\uffeb" +
    "\046\uffeb\050\uffeb\057\uffeb\001\002\000\032\004\uffee\006" +
    "\uffee\027\142\030\137\031\134\032\144\033\141\043\uffee" +
    "\044\uffee\046\uffee\050\uffee\057\uffee\001\002\000\046\004" +
    "\uffff\006\uffff\027\uffff\030\137\031\uffff\032\144\033\141" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\043" +
    "\uffff\044\uffff\046\uffff\050\uffff\057\uffff\001\002\000\010" +
    "\005\uffc9\007\uffc9\047\uffc9\001\002\000\024\007\124\011" +
    "\112\012\116\014\120\022\113\023\123\024\114\026\111" +
    "\031\110\001\002\000\016\027\142\030\137\031\134\032" +
    "\144\033\141\046\165\001\002\000\046\004\ufffb\006\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb" +
    "\046\ufffb\050\ufffb\057\ufffb\001\002\000\004\007\170\001" +
    "\002\000\004\057\173\001\002\000\004\005\171\001\002" +
    "\000\030\007\124\011\112\012\116\014\120\022\113\023" +
    "\123\024\114\026\111\031\110\042\122\045\121\001\002" +
    "\000\010\043\126\044\127\057\uffac\001\002\000\030\007" +
    "\124\011\112\012\116\014\120\022\113\023\123\024\114" +
    "\026\111\031\110\042\122\045\121\001\002\000\010\043" +
    "\126\044\127\057\175\001\002\000\006\027\176\031\200" +
    "\001\002\000\004\022\210\001\002\000\004\046\202\001" +
    "\002\000\004\022\201\001\002\000\004\046\uffaa\001\002" +
    "\000\052\003\055\007\056\010\010\013\024\015\017\016" +
    "\005\017\006\020\023\021\015\025\013\047\204\051\043" +
    "\054\041\055\046\056\061\060\065\061\054\062\051\063" +
    "\066\064\037\001\002\000\060\003\uffae\007\uffae\010\uffae" +
    "\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\025" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\066" +
    "\uffae\001\002\000\052\003\055\007\056\010\010\013\024" +
    "\015\017\016\005\017\006\020\023\021\015\025\013\033" +
    "\044\051\043\054\041\055\046\056\061\060\065\061\054" +
    "\062\051\063\066\064\037\001\002\000\052\003\055\007" +
    "\056\010\010\013\024\015\017\016\005\017\006\020\023" +
    "\021\015\025\013\050\206\051\043\054\041\055\046\056" +
    "\061\060\065\061\054\062\051\063\066\064\037\001\002" +
    "\000\060\003\uffad\007\uffad\010\uffad\013\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\025\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\066\uffad\001\002\000\054" +
    "\003\uffd8\007\uffd8\010\uffd8\013\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\025\uffd8\050\uffd8\051\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\066\uffd8\001\002\000\004\046\uffab\001\002\000\030" +
    "\007\124\011\112\012\116\014\120\022\113\023\123\024" +
    "\114\026\111\031\110\042\122\045\121\001\002\000\006" +
    "\005\213\047\077\001\002\000\030\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\042\122\045\121\001\002\000\010\004\215\043\126\044" +
    "\127\001\002\000\060\003\uffc4\007\uffc4\010\uffc4\013\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\025\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\001" +
    "\002\000\010\004\217\043\126\044\127\001\002\000\060" +
    "\003\uffce\007\uffce\010\uffce\013\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\025\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\066\uffce\001\002\000\024\007\124" +
    "\011\112\012\116\014\120\022\113\023\123\024\114\026" +
    "\111\031\110\001\002\000\006\006\uffa3\050\uffa3\001\002" +
    "\000\020\006\uffa2\027\142\030\137\031\134\032\144\033" +
    "\141\050\uffa2\001\002\000\006\006\225\050\224\001\002" +
    "\000\004\004\227\001\002\000\024\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\001\002\000\006\006\uffa4\050\uffa4\001\002\000\060\003" +
    "\uffa7\007\uffa7\010\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\025\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\066\uffa7\001\002\000\024\007\124\011" +
    "\112\012\116\014\120\022\113\023\123\024\114\026\111" +
    "\031\110\001\002\000\006\006\225\050\232\001\002\000" +
    "\004\004\233\001\002\000\060\003\uffa8\007\uffa8\010\uffa8" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\025" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\066" +
    "\uffa8\001\002\000\010\004\uffd1\005\242\006\uffd1\001\002" +
    "\000\006\004\uffd2\006\uffd2\001\002\000\006\004\240\006" +
    "\237\001\002\000\004\007\234\001\002\000\064\003\uffd4" +
    "\007\uffd4\010\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\025\uffd4\033\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002\000\006" +
    "\004\uffd3\006\uffd3\001\002\000\030\007\124\011\112\012" +
    "\116\014\120\022\113\023\123\024\114\026\111\031\110" +
    "\042\122\045\121\001\002\000\012\004\uffd0\006\uffd0\043" +
    "\126\044\127\001\002\000\004\054\254\001\002\000\052" +
    "\003\055\007\056\010\010\013\024\015\017\016\005\017" +
    "\006\020\023\021\015\025\013\033\044\051\043\054\041" +
    "\055\046\056\061\060\065\061\054\062\051\063\066\064" +
    "\037\001\002\000\052\003\055\007\056\010\010\013\024" +
    "\015\017\016\005\017\006\020\023\021\015\025\013\050" +
    "\247\051\043\054\041\055\046\056\061\060\065\061\054" +
    "\062\051\063\066\064\037\001\002\000\004\054\250\001" +
    "\002\000\004\045\251\001\002\000\030\007\124\011\112" +
    "\012\116\014\120\022\113\023\123\024\114\026\111\031" +
    "\110\042\122\045\121\001\002\000\010\043\126\044\127" +
    "\046\253\001\002\000\060\003\uffb0\007\uffb0\010\uffb0\013" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\025\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\066\uffb0" +
    "\001\002\000\004\045\255\001\002\000\030\007\124\011" +
    "\112\012\116\014\120\022\113\023\123\024\114\026\111" +
    "\031\110\042\122\045\121\001\002\000\010\043\126\044" +
    "\127\046\257\001\002\000\060\003\uffb1\007\uffb1\010\uffb1" +
    "\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\066" +
    "\uffb1\001\002\000\004\033\261\001\002\000\054\003\uff92" +
    "\007\uff92\010\uff92\013\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\025\uff92\050\uff92\051\uff92\054\uff92\055\uff92" +
    "\056\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\066" +
    "\uff92\001\002\000\030\007\124\011\112\012\116\014\120" +
    "\022\113\023\123\024\114\026\111\031\110\042\122\045" +
    "\121\001\002\000\010\043\126\044\127\046\264\001\002" +
    "\000\052\003\055\007\056\010\010\013\024\015\017\016" +
    "\005\017\006\020\023\021\015\025\013\047\266\051\043" +
    "\054\041\055\046\056\061\060\065\061\054\062\051\063" +
    "\066\064\037\001\002\000\060\003\uffc2\007\uffc2\010\uffc2" +
    "\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\066" +
    "\uffc2\001\002\000\052\003\055\007\056\010\010\013\024" +
    "\015\017\016\005\017\006\020\023\021\015\025\013\033" +
    "\044\051\043\054\041\055\046\056\061\060\065\061\054" +
    "\062\051\063\066\064\037\001\002\000\052\003\055\007" +
    "\056\010\010\013\024\015\017\016\005\017\006\020\023" +
    "\021\015\025\013\050\270\051\043\054\041\055\046\056" +
    "\061\060\065\061\054\062\051\063\066\064\037\001\002" +
    "\000\060\003\uffc1\007\uffc1\010\uffc1\013\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\025\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\001\002\000\052" +
    "\003\055\007\056\010\010\013\024\015\017\016\005\017" +
    "\006\020\023\021\015\025\013\047\313\051\043\054\041" +
    "\055\046\056\061\060\065\061\054\062\051\063\066\064" +
    "\037\001\002\000\060\003\uffbc\007\uffbc\010\uffbc\013\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\025\uffbc\050" +
    "\uffbc\051\uffbc\052\273\053\304\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc\001" +
    "\002\000\004\045\275\001\002\000\060\003\uffb8\007\uffb8" +
    "\010\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\025\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\066\uffb8\001\002\000\030\007\124\011\112\012\116" +
    "\014\120\022\113\023\123\024\114\026\111\031\110\042" +
    "\122\045\121\001\002\000\010\043\126\044\127\046\277" +
    "\001\002\000\052\003\055\007\056\010\010\013\024\015" +
    "\017\016\005\017\006\020\023\021\015\025\013\047\301" +
    "\051\043\054\041\055\046\056\061\060\065\061\054\062" +
    "\051\063\066\064\037\001\002\000\060\003\uffb7\007\uffb7" +
    "\010\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\025\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\066\uffb7\001\002\000\052\003\055\007\056\010\010" +
    "\013\024\015\017\016\005\017\006\020\023\021\015\025" +
    "\013\033\044\051\043\054\041\055\046\056\061\060\065" +
    "\061\054\062\051\063\066\064\037\001\002\000\052\003" +
    "\055\007\056\010\010\013\024\015\017\016\005\017\006" +
    "\020\023\021\015\025\013\050\303\051\043\054\041\055" +
    "\046\056\061\060\065\061\054\062\051\063\066\064\037" +
    "\001\002\000\060\003\uffb6\007\uffb6\010\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6\001\002" +
    "\000\052\003\055\007\056\010\010\013\024\015\017\016" +
    "\005\017\006\020\023\021\015\025\013\047\307\051\043" +
    "\054\041\055\046\056\061\060\065\061\054\062\051\063" +
    "\066\064\037\001\002\000\060\003\uffb9\007\uffb9\010\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\025" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\066" +
    "\uffb9\001\002\000\060\003\uffbb\007\uffbb\010\uffbb\013\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\025\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\001" +
    "\002\000\052\003\055\007\056\010\010\013\024\015\017" +
    "\016\005\017\006\020\023\021\015\025\013\033\044\051" +
    "\043\054\041\055\046\056\061\060\065\061\054\062\051" +
    "\063\066\064\037\001\002\000\052\003\055\007\056\010" +
    "\010\013\024\015\017\016\005\017\006\020\023\021\015" +
    "\025\013\050\311\051\043\054\041\055\046\056\061\060" +
    "\065\061\054\062\051\063\066\064\037\001\002\000\060" +
    "\003\uffba\007\uffba\010\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\025\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\066\uffba\001\002\000\060\003\uffbf" +
    "\007\uffbf\010\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\025\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\066\uffbf\001\002\000\052\003\055\007\056" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\033\044\051\043\054\041\055\046\056\061" +
    "\060\065\061\054\062\051\063\066\064\037\001\002\000" +
    "\052\003\055\007\056\010\010\013\024\015\017\016\005" +
    "\017\006\020\023\021\015\025\013\050\315\051\043\054" +
    "\041\055\046\056\061\060\065\061\054\062\051\063\066" +
    "\064\037\001\002\000\060\003\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\025\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\001\002\000\030\007\124\011\112\012\116\014\120\022" +
    "\113\023\123\024\114\026\111\031\110\042\122\045\121" +
    "\001\002\000\010\043\126\044\127\046\320\001\002\000" +
    "\052\003\055\007\056\010\010\013\024\015\017\016\005" +
    "\017\006\020\023\021\015\025\013\047\322\051\043\054" +
    "\041\055\046\056\061\060\065\061\054\062\051\063\066" +
    "\064\037\001\002\000\060\003\uffb4\007\uffb4\010\uffb4\013" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\025\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\066\uffb4" +
    "\001\002\000\052\003\055\007\056\010\010\013\024\015" +
    "\017\016\005\017\006\020\023\021\015\025\013\033\044" +
    "\051\043\054\041\055\046\056\061\060\065\061\054\062" +
    "\051\063\066\064\037\001\002\000\052\003\055\007\056" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\050\324\051\043\054\041\055\046\056\061" +
    "\060\065\061\054\062\051\063\066\064\037\001\002\000" +
    "\060\003\uffb3\007\uffb3\010\uffb3\013\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\025\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\066\uffb3\001\002\000\004\002" +
    "\uff91\001\002\000\004\007\327\001\002\000\004\050\330" +
    "\001\002\000\004\004\331\001\002\000\060\003\uffa5\007" +
    "\uffa5\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\025\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\066\uffa5\001\002\000\004\033\372\001\002\000" +
    "\026\010\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\025\uffa1\033\uffa1\065\uffa1\001\002\000\004\007" +
    "\335\001\002\000\004\045\336\001\002\000\026\006\uff9b" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\046\uff9b\001\002\000\006\006\343\046\344" +
    "\001\002\000\006\006\uff9c\046\uff9c\001\002\000\004\007" +
    "\342\001\002\000\006\006\uff9a\046\uff9a\001\002\000\022" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\001\002\000\004\047\345\001\002\000\024" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\033\347\001\002\000\004\050\370\001\002" +
    "\000\004\033\361\001\002\000\024\010\010\013\024\015" +
    "\017\016\005\017\006\020\023\021\015\025\013\033\351" +
    "\001\002\000\004\033\352\001\002\000\004\033\353\001" +
    "\002\000\054\003\055\007\056\010\010\013\024\015\017" +
    "\016\005\017\006\020\023\021\015\025\013\033\044\051" +
    "\043\054\041\055\046\056\061\060\065\061\054\062\051" +
    "\063\066\064\037\066\355\001\002\000\052\003\055\007" +
    "\056\010\010\013\024\015\017\016\005\017\006\020\023" +
    "\021\015\025\013\051\043\054\041\055\046\056\061\060" +
    "\065\061\054\062\051\063\066\064\037\066\357\001\002" +
    "\000\030\007\124\011\112\012\116\014\120\022\113\023" +
    "\123\024\114\026\111\031\110\042\122\045\121\001\002" +
    "\000\010\043\126\044\127\050\uff98\001\002\000\030\007" +
    "\124\011\112\012\116\014\120\022\113\023\123\024\114" +
    "\026\111\031\110\042\122\045\121\001\002\000\010\043" +
    "\126\044\127\050\uff99\001\002\000\004\033\362\001\002" +
    "\000\054\003\055\007\056\010\010\013\024\015\017\016" +
    "\005\017\006\020\023\021\015\025\013\033\044\051\043" +
    "\054\041\055\046\056\061\060\065\061\054\062\051\063" +
    "\066\064\037\066\364\001\002\000\052\003\055\007\056" +
    "\010\010\013\024\015\017\016\005\017\006\020\023\021" +
    "\015\025\013\051\043\054\041\055\046\056\061\060\065" +
    "\061\054\062\051\063\066\064\037\066\366\001\002\000" +
    "\030\007\124\011\112\012\116\014\120\022\113\023\123" +
    "\024\114\026\111\031\110\042\122\045\121\001\002\000" +
    "\010\043\126\044\127\050\uff96\001\002\000\030\007\124" +
    "\011\112\012\116\014\120\022\113\023\123\024\114\026" +
    "\111\031\110\042\122\045\121\001\002\000\010\043\126" +
    "\044\127\050\uff97\001\002\000\026\010\uff9f\013\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\025\uff9f\033\uff9f" +
    "\065\uff9f\001\002\000\006\006\uff9d\046\uff9d\001\002\000" +
    "\004\033\373\001\002\000\004\067\033\001\002\000\004" +
    "\002\uffdf\001\002\000\012\004\uffd1\005\242\006\uffd1\045" +
    "\336\001\002\000\004\033\377\001\002\000\004\067\033" +
    "\001\002\000\004\002\uffdc\001\002\000\004\002\001\001" +
    "\002\000\004\045\u0103\001\002\000\026\006\uff9b\010\010" +
    "\013\024\015\017\016\005\017\006\020\023\021\015\025" +
    "\013\046\uff9b\001\002\000\006\006\343\046\u0105\001\002" +
    "\000\004\047\u0106\001\002\000\024\010\010\013\024\015" +
    "\017\016\005\017\006\020\023\021\015\025\013\033\u0107" +
    "\001\002\000\004\033\u010f\001\002\000\004\050\u010e\001" +
    "\002\000\024\010\010\013\024\015\017\016\005\017\006" +
    "\020\023\021\015\025\013\033\u010a\001\002\000\004\033" +
    "\u010b\001\002\000\004\033\u010c\001\002\000\054\003\055" +
    "\007\056\010\010\013\024\015\017\016\005\017\006\020" +
    "\023\021\015\025\013\033\044\050\uff94\051\043\054\041" +
    "\055\046\056\061\060\065\061\054\062\051\063\066\064" +
    "\037\001\002\000\052\003\055\007\056\010\010\013\024" +
    "\015\017\016\005\017\006\020\023\021\015\025\013\050" +
    "\uff95\051\043\054\041\055\046\056\061\060\065\061\054" +
    "\062\051\063\066\064\037\001\002\000\026\010\uff9e\013" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\025\uff9e" +
    "\033\uff9e\065\uff9e\001\002\000\004\033\u0110\001\002\000" +
    "\052\003\055\007\056\010\010\013\024\015\017\016\005" +
    "\017\006\020\023\021\015\025\013\033\044\051\043\054" +
    "\041\055\046\056\061\060\065\061\054\062\051\063\066" +
    "\064\037\001\002\000\052\003\055\007\056\010\010\013" +
    "\024\015\017\016\005\017\006\020\023\021\015\025\013" +
    "\050\uff93\051\043\054\041\055\046\056\061\060\065\061" +
    "\054\062\051\063\066\064\037\001\002\000\004\033\u0113" +
    "\001\002\000\004\033\u0114\001\002\000\004\067\033\001" +
    "\002\000\004\002\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\020\002\011\005\021\006\017\007\006\010" +
    "\020\044\003\045\015\001\001\000\006\010\333\045\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\235\012\234\001\001\000\014\006\026\007\006\010" +
    "\020\044\024\045\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\333\045\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\037\004\063\007\047" +
    "\010\046\016\061\017\044\024\052\025\041\026\057\027" +
    "\051\032\066\034\067\036\056\041\062\001\001\000\002" +
    "\001\001\000\034\004\206\007\047\010\046\016\061\017" +
    "\044\024\052\025\041\026\057\027\051\032\066\034\067" +
    "\036\056\041\062\001\001\000\002\001\001\000\006\030" +
    "\271\031\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\243\007\047\010\046\016" +
    "\061\017\044\024\052\025\041\026\057\027\051\032\066" +
    "\034\067\036\056\041\062\001\001\000\006\011\235\012" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\211\022\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\077\022\075\001\001\000\002\001" +
    "\001\000\006\013\116\014\114\001\001\000\010\020\103" +
    "\022\100\023\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\116\014\131" +
    "\001\001\000\006\013\116\014\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\116" +
    "\014\130\001\001\000\006\013\116\014\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\160\001\001\000\004\013\157\001" +
    "\001\000\004\013\156\001\001\000\004\013\155\001\001" +
    "\000\004\013\154\001\001\000\004\013\153\001\001\000" +
    "\004\013\152\001\001\000\004\013\151\001\001\000\004" +
    "\013\150\001\001\000\004\013\147\001\001\000\004\013" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\116\014\171\001\001\000\002\001\001" +
    "\000\006\013\116\014\173\001\001\000\002\001\001\000" +
    "\004\037\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\202\007" +
    "\047\010\046\016\061\017\044\024\052\025\041\026\057" +
    "\027\051\032\066\034\067\036\056\041\062\001\001\000" +
    "\002\001\001\000\036\003\204\004\063\007\047\010\046" +
    "\016\061\017\044\024\052\025\041\026\057\027\051\032" +
    "\066\034\067\036\056\041\062\001\001\000\034\004\206" +
    "\007\047\010\046\016\061\017\044\024\052\025\041\026" +
    "\057\027\051\032\066\034\067\036\056\041\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\116\014\215\001\001\000\004\022\100\001\001" +
    "\000\006\013\116\014\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\221\042\222\043\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\221\043\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\221\042\230\043\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\116\014\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\245\004\063\007\047\010\046\016\061\017" +
    "\044\024\052\025\041\026\057\027\051\032\066\034\067" +
    "\036\056\041\062\001\001\000\034\004\206\007\047\010" +
    "\046\016\061\017\044\024\052\025\041\026\057\027\051" +
    "\032\066\034\067\036\056\041\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\116\014\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\116\014\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\116\014\262\001\001\000\002\001\001\000\034\004\264" +
    "\007\047\010\046\016\061\017\044\024\052\025\041\026" +
    "\057\027\051\032\066\034\067\036\056\041\062\001\001" +
    "\000\002\001\001\000\036\003\266\004\063\007\047\010" +
    "\046\016\061\017\044\024\052\025\041\026\057\027\051" +
    "\032\066\034\067\036\056\041\062\001\001\000\034\004" +
    "\206\007\047\010\046\016\061\017\044\024\052\025\041" +
    "\026\057\027\051\032\066\034\067\036\056\041\062\001" +
    "\001\000\002\001\001\000\034\004\311\007\047\010\046" +
    "\016\061\017\044\024\052\025\041\026\057\027\051\032" +
    "\066\034\067\036\056\041\062\001\001\000\004\031\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\116\014\275\001\001\000\002\001\001\000\034\004\277" +
    "\007\047\010\046\016\061\017\044\024\052\025\041\026" +
    "\057\027\051\032\066\034\067\036\056\041\062\001\001" +
    "\000\002\001\001\000\036\003\301\004\063\007\047\010" +
    "\046\016\061\017\044\024\052\025\041\026\057\027\051" +
    "\032\066\034\067\036\056\041\062\001\001\000\034\004" +
    "\206\007\047\010\046\016\061\017\044\024\052\025\041" +
    "\026\057\027\051\032\066\034\067\036\056\041\062\001" +
    "\001\000\002\001\001\000\034\004\305\007\047\010\046" +
    "\016\061\017\044\024\052\025\041\026\057\027\051\032" +
    "\066\034\067\036\056\041\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\307\004\063\007\047\010" +
    "\046\016\061\017\044\024\052\025\041\026\057\027\051" +
    "\032\066\034\067\036\056\041\062\001\001\000\034\004" +
    "\206\007\047\010\046\016\061\017\044\024\052\025\041" +
    "\026\057\027\051\032\066\034\067\036\056\041\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\313" +
    "\004\063\007\047\010\046\016\061\017\044\024\052\025" +
    "\041\026\057\027\051\032\066\034\067\036\056\041\062" +
    "\001\001\000\034\004\206\007\047\010\046\016\061\017" +
    "\044\024\052\025\041\026\057\027\051\032\066\034\067" +
    "\036\056\041\062\001\001\000\002\001\001\000\006\013" +
    "\116\014\316\001\001\000\002\001\001\000\034\004\320" +
    "\007\047\010\046\016\061\017\044\024\052\025\041\026" +
    "\057\027\051\032\066\034\067\036\056\041\062\001\001" +
    "\000\002\001\001\000\036\003\322\004\063\007\047\010" +
    "\046\016\061\017\044\024\052\025\041\026\057\027\051" +
    "\032\066\034\067\036\056\041\062\001\001\000\034\004" +
    "\206\007\047\010\046\016\061\017\044\024\052\025\041" +
    "\026\057\027\051\032\066\034\067\036\056\041\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\340\047\336\050\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\340\050\370\001\001\000\002\001" +
    "\001\000\014\005\347\006\017\007\006\010\046\052\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\026\007\006\010\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\353\004\063\007\047\010\046\016" +
    "\061\017\044\024\052\025\041\026\057\027\051\032\066" +
    "\034\067\036\056\041\062\001\001\000\034\004\206\007" +
    "\047\010\046\016\061\017\044\024\052\025\041\026\057" +
    "\027\051\032\066\034\067\036\056\041\062\001\001\000" +
    "\006\013\116\014\355\001\001\000\002\001\001\000\006" +
    "\013\116\014\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\362\004\063\007\047\010\046\016\061" +
    "\017\044\024\052\025\041\026\057\027\051\032\066\034" +
    "\067\036\056\041\062\001\001\000\034\004\206\007\047" +
    "\010\046\016\061\017\044\024\052\025\041\026\057\027" +
    "\051\032\066\034\067\036\056\041\062\001\001\000\006" +
    "\013\116\014\364\001\001\000\002\001\001\000\006\013" +
    "\116\014\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\340\047\u0103\050\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\u0108\006\017\007\006\010\046\051\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\026\007\006\010" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\u010c\004\063\007\047\010\046\016\061\017\044\024" +
    "\052\025\041\026\057\027\051\032\066\034\067\036\056" +
    "\041\062\001\001\000\034\004\206\007\047\010\046\016" +
    "\061\017\044\024\052\025\041\026\057\027\051\032\066" +
    "\034\067\036\056\041\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u0110\004\063\007\047\010\046" +
    "\016\061\017\044\024\052\025\041\026\057\027\051\032" +
    "\066\034\067\036\056\041\062\001\001\000\034\004\206" +
    "\007\047\010\046\016\061\017\044\024\052\025\041\026" +
    "\057\027\051\032\066\034\067\036\056\041\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0114\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public parser(AnalizadorLexicoCodigo lex){
        super(lex);
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        int columna = s.right;
        int linea = s.left;
        System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
 }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= expresion PORCENTAJE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= MENOS PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECLARACION_CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMERO_DECIMALF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comparacion ::= comparacion AND comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comparacion ::= comparacion OR comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comparacion ::= NOT comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comparacion ::= PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comparacion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comparacion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparacion ::= expresion DISTINTO_DE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparacion ::= expresion IGUAL_A expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparacion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoDeVariable ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDeVariable ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDeVariable ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDeVariable ::= BYTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDeVariable ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDeVariable ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoDeVariable ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoDeVariable ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= conjuntoDeDeclaraciones conjuntoDeSubprogramas PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= conjuntoDeSubprogramas PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= PORCENTAJE PORCENTAJE PORCENTAJE funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conjuntoDeDeclaraciones ::= conjuntoDeDeclaraciones unaDeclaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conjuntoDeDeclaraciones ::= unaDeclaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unaDeclaracion ::= declaracionDeVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unaInstruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unaInstruccion ::= declaracionDeVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unaInstruccion ::= asignacionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION comparacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unaInstruccion ::= declaracionDeArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracionDeArreglos ::= ARRAY tipoDeVariable conjuntoDeDimensiones conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuntoDeDimensiones ::= conjuntoDeDimensiones unaDimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuntoDeDimensiones ::= unaDimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaDimension ::= CORCHETE_ABIERTO comparacion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDimension",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unaInstruccion ::= asignacionDeArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacionDeArreglo ::= IDENTIFICADOR conjuntoDeDimensiones ASIGNACION comparacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracionDeEstructuraIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unElseIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionDeEstructuraWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionDeEstructuraDoWhile ::= DO unaInstruccion WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionDeEstructuraDoWhile ::= DO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionDeEstructuraFor ::= FOR PARENTESIS_ABIERTO asignacionParaFor DOS_PUNTOS comparacion DOS_PUNTOS incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacionParaFor ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionParaFor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracionDeFuncionesPredefinidas ::= SCANS CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionDeFuncionesPredefinidas ::= SCANN CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // conjuntoDeTexto ::= unTexto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unTexto ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conjuntoDeSubprogramas ::= conjuntoDeSubprogramas unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // conjuntoDeSubprogramas ::= unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncionReturn CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unSubPrograma ::= VOID IDENTIFICADOR PARENTESIS_ABIERTO conjuntoDeParametros PARENTESIS_CERRADO CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conjuntoDeParametros ::= conjuntoDeParametros COMA unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conjuntoDeParametros ::= unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conjuntoDeParametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unParametro ::= tipoDeVariable IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpoDeFuncionReturn ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpoDeFuncionReturn ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpoDeFuncionReturn ::= PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpoDeFuncionReturn ::= PORCENTAJE PORCENTAJE PORCENTAJE RETURN comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncionReturn",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones PORCENTAJE PORCENTAJE PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpoDeFuncion ::= PORCENTAJE PORCENTAJE PORCENTAJE conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conjuntoDeInstrucciones ::= PORCENTAJE PORCENTAJE PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funcionMain ::= MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
