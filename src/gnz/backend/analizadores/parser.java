
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.backend.analizadores;

import gnz.backend.cuarteto.*;
import gnz.backend.errores.ManejadorDeErrores;
import gnz.backend.funcion.Parametro;
import java_cup.runtime.*;
import gnz.backend.nodo.Nodo;
import gnz.backend.nodoExpresion.*;
import gnz.backend.nodoComparacion.*;
import gnz.backend.nodoDeclaracion.*;
import gnz.backend.manejoDeVariables.*;
import gnz.gui.frames.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\006\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\002\006\000\002" +
    "\002\005\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\004\003\000\002\004\003\000\002" +
    "\010\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\005\000\002\004\003\000\002\016\006" +
    "\000\002\004\003\000\002\017\007\000\002\021\004\000" +
    "\002\021\003\000\002\022\005\000\002\023\005\000\002" +
    "\023\003\000\002\020\003\000\002\004\003\000\002\024" +
    "\007\000\002\004\003\000\002\025\006\000\002\026\004" +
    "\000\002\026\006\000\002\004\003\000\002\027\005\000" +
    "\002\027\007\000\002\004\003\000\002\031\004\000\002" +
    "\031\006\000\002\031\010\000\002\032\004\000\002\032" +
    "\003\000\002\030\006\000\002\033\004\000\002\033\006" +
    "\000\002\004\003\000\002\034\006\000\002\035\004\000" +
    "\002\035\006\000\002\004\003\000\002\040\003\000\002" +
    "\037\010\000\002\037\012\000\002\004\003\000\002\043" +
    "\007\000\002\044\005\000\002\041\007\000\002\041\011" +
    "\000\002\042\004\000\002\042\004\000\002\004\003\000" +
    "\002\045\007\000\002\045\007\000\002\045\007\000\002" +
    "\045\007\000\002\046\005\000\002\046\003\000\002\047" +
    "\003\000\002\004\003\000\002\056\005\000\002\004\003" +
    "\000\002\057\006\000\002\060\005\000\002\060\003\000" +
    "\002\061\003\000\002\050\004\000\002\050\003\000\002" +
    "\063\002\000\002\064\002\000\002\051\014\000\002\065" +
    "\002\000\002\066\002\000\002\051\013\000\002\053\005" +
    "\000\002\053\003\000\002\054\004\000\002\055\005\000" +
    "\002\055\004\000\002\055\004\000\002\055\003\000\002" +
    "\067\002\000\002\062\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\032\007\025\010\015\013\007\015\010\016" +
    "\006\017\004\020\021\021\031\025\020\060\027\065\030" +
    "\070\017\001\002\000\006\007\uffe0\047\uffe0\001\002\000" +
    "\032\007\uffd5\010\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\025\uffd5\060\uffd5\065\uffd5\070\uffd5\001" +
    "\002\000\006\007\uffe1\047\uffe1\001\002\000\006\007\uffe3" +
    "\047\uffe3\001\002\000\006\007\uffe2\047\uffe2\001\002\000" +
    "\026\010\uff8e\013\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\025\uff8e\065\uff8e\070\uff8e\001\002\000\032\007" +
    "\uffd2\010\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\025\uffd2\060\uffd2\065\uffd2\070\uffd2\001\002\000" +
    "\032\007\025\010\015\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\060\027\065\030\070\u010a\001" +
    "\002\000\004\007\u0109\001\002\000\006\007\uffe4\047\uffe4" +
    "\001\002\000\004\002\u0108\001\002\000\004\067\u0100\001" +
    "\002\000\006\007\uffe5\047\uffe5\001\002\000\006\007\uffdf" +
    "\047\uffdf\001\002\000\032\007\uffd4\010\uffd4\013\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\025\uffd4\060\uffd4" +
    "\065\uffd4\070\uffd4\001\002\000\026\010\015\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\065\030" +
    "\070\143\001\002\000\032\007\uffd1\010\uffd1\013\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\025\uffd1\060\uffd1" +
    "\065\uffd1\070\uffd1\001\002\000\006\005\134\047\034\001" +
    "\002\000\032\007\uffd3\010\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\025\uffd3\060\uffd3\065\uffd3\070" +
    "\uffd3\001\002\000\024\010\015\013\007\015\010\016\006" +
    "\017\004\020\021\021\031\025\020\065\030\001\002\000" +
    "\006\007\uffdd\047\uffdd\001\002\000\006\007\uffde\047\uffde" +
    "\001\002\000\004\047\034\001\002\000\054\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\057\uffc4" +
    "\001\002\000\030\007\062\011\047\012\054\014\055\022" +
    "\050\023\061\024\051\026\046\031\045\042\060\045\057" +
    "\001\002\000\006\007\037\047\034\001\002\000\054\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\057\uffc5\001\002\000\006\004\uffc0\006\uffc0\001\002\000" +
    "\006\004\043\006\042\001\002\000\006\004\uffc1\006\uffc1" +
    "\001\002\000\004\007\037\001\002\000\064\003\uffc6\007" +
    "\uffc6\010\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\025\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\070\uffc6\001\002\000\006\004" +
    "\uffc2\006\uffc2\001\002\000\004\045\131\001\002\000\046" +
    "\004\ufff2\006\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\044\ufff2\046\ufff2\050\ufff2\057\ufff2\001\002\000" +
    "\046\004\ufff8\006\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\057\ufff8\001\002" +
    "\000\046\004\ufff5\006\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\043\ufff5\044\ufff5\046\ufff5\050\ufff5\057\ufff5\001" +
    "\002\000\046\004\ufff3\006\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\043\ufff3\044\ufff3\046\ufff3\050\ufff3\057\ufff3" +
    "\001\002\000\010\043\070\044\071\050\130\001\002\000" +
    "\046\004\uffe6\006\uffe6\027\101\030\105\031\103\032\104" +
    "\033\102\034\114\035\117\036\121\037\115\040\116\041" +
    "\120\043\uffe6\044\uffe6\046\uffe6\050\uffe6\057\uffe6\001\002" +
    "\000\046\004\ufff7\006\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\043\ufff7\044\ufff7\046\ufff7\050\ufff7\057\ufff7\001" +
    "\002\000\046\004\ufff6\006\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\043\ufff6\044\ufff6\046\ufff6\050\ufff6\057\ufff6" +
    "\001\002\000\046\004\ufff0\006\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\057" +
    "\ufff0\001\002\000\026\007\062\011\047\012\054\014\055" +
    "\022\050\023\061\024\051\026\046\031\045\045\057\001" +
    "\002\000\030\007\062\011\047\012\054\014\055\022\050" +
    "\023\061\024\051\026\046\031\045\042\060\045\057\001" +
    "\002\000\046\004\ufff4\006\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\044\ufff4\046\ufff4\050\ufff4\057\ufff4" +
    "\001\002\000\052\004\ufff9\006\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\064\046\ufff9\047" +
    "\034\050\ufff9\057\ufff9\001\002\000\050\004\ufff1\006\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1" +
    "\046\ufff1\047\034\050\ufff1\057\ufff1\001\002\000\030\007" +
    "\062\011\047\012\054\014\055\022\050\023\061\024\051" +
    "\026\046\031\045\042\060\045\057\001\002\000\006\006" +
    "\074\046\075\001\002\000\006\006\uff91\046\uff91\001\002" +
    "\000\012\006\uff90\043\070\044\071\046\uff90\001\002\000" +
    "\030\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\042\060\045\057\001\002\000" +
    "\030\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\042\060\045\057\001\002\000" +
    "\020\004\uffee\006\uffee\043\070\044\uffee\046\uffee\050\uffee" +
    "\057\uffee\001\002\000\020\004\uffef\006\uffef\043\uffef\044" +
    "\uffef\046\uffef\050\uffef\057\uffef\001\002\000\030\007\062" +
    "\011\047\012\054\014\055\022\050\023\061\024\051\026" +
    "\046\031\045\042\060\045\057\001\002\000\124\003\uff93" +
    "\004\uff93\006\uff93\007\uff93\010\uff93\013\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\025\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\043\uff93\044\uff93\046\uff93\050\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\001\002\000\006\006\uff92\046\uff92\001\002\000" +
    "\020\004\uffed\006\uffed\043\uffed\044\uffed\046\uffed\050\uffed" +
    "\057\uffed\001\002\000\016\027\101\030\105\031\103\032" +
    "\104\033\102\046\106\001\002\000\026\007\062\011\047" +
    "\012\054\014\055\022\050\023\061\024\051\026\046\031" +
    "\045\045\057\001\002\000\026\007\062\011\047\012\054" +
    "\014\055\022\050\023\061\024\051\026\046\031\045\045" +
    "\057\001\002\000\026\007\062\011\047\012\054\014\055" +
    "\022\050\023\061\024\051\026\046\031\045\045\057\001" +
    "\002\000\026\007\062\011\047\012\054\014\055\022\050" +
    "\023\061\024\051\026\046\031\045\045\057\001\002\000" +
    "\026\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\045\057\001\002\000\046\004" +
    "\ufffb\006\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043" +
    "\ufffb\044\ufffb\046\ufffb\050\ufffb\057\ufffb\001\002\000\046" +
    "\004\ufffe\006\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\043\ufffe\044\ufffe\046\ufffe\050\ufffe\057\ufffe\001\002\000" +
    "\046\004\ufffd\006\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\043\ufffd\044\ufffd\046\ufffd\050\ufffd\057\ufffd\001\002" +
    "\000\046\004\uffff\006\uffff\027\uffff\030\105\031\uffff\032" +
    "\104\033\102\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\043\uffff\044\uffff\046\uffff\050\uffff\057\uffff\001" +
    "\002\000\046\004\ufffc\006\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\043\ufffc\044\ufffc\046\ufffc\050\ufffc\057\ufffc" +
    "\001\002\000\046\004\000\006\000\027\000\030\105\031" +
    "\000\032\104\033\102\034\000\035\000\036\000\037\000" +
    "\040\000\041\000\043\000\044\000\046\000\050\000\057" +
    "\000\001\002\000\026\007\062\011\047\012\054\014\055" +
    "\022\050\023\061\024\051\026\046\031\045\045\057\001" +
    "\002\000\026\007\062\011\047\012\054\014\055\022\050" +
    "\023\061\024\051\026\046\031\045\045\057\001\002\000" +
    "\026\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\045\057\001\002\000\026\007" +
    "\062\011\047\012\054\014\055\022\050\023\061\024\051" +
    "\026\046\031\045\045\057\001\002\000\026\007\062\011" +
    "\047\012\054\014\055\022\050\023\061\024\051\026\046" +
    "\031\045\045\057\001\002\000\026\007\062\011\047\012" +
    "\054\014\055\022\050\023\061\024\051\026\046\031\045" +
    "\045\057\001\002\000\032\004\uffea\006\uffea\027\101\030" +
    "\105\031\103\032\104\033\102\043\uffea\044\uffea\046\uffea" +
    "\050\uffea\057\uffea\001\002\000\032\004\uffe7\006\uffe7\027" +
    "\101\030\105\031\103\032\104\033\102\043\uffe7\044\uffe7" +
    "\046\uffe7\050\uffe7\057\uffe7\001\002\000\032\004\uffeb\006" +
    "\uffeb\027\101\030\105\031\103\032\104\033\102\043\uffeb" +
    "\044\uffeb\046\uffeb\050\uffeb\057\uffeb\001\002\000\032\004" +
    "\uffe8\006\uffe8\027\101\030\105\031\103\032\104\033\102" +
    "\043\uffe8\044\uffe8\046\uffe8\050\uffe8\057\uffe8\001\002\000" +
    "\032\004\uffe9\006\uffe9\027\101\030\105\031\103\032\104" +
    "\033\102\043\uffe9\044\uffe9\046\uffe9\050\uffe9\057\uffe9\001" +
    "\002\000\032\004\uffec\006\uffec\027\101\030\105\031\103" +
    "\032\104\033\102\043\uffec\044\uffec\046\uffec\050\uffec\057" +
    "\uffec\001\002\000\054\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\057\uffc3\001\002\000\026\007" +
    "\062\011\047\012\054\014\055\022\050\023\061\024\051" +
    "\026\046\031\045\045\057\001\002\000\016\027\101\030" +
    "\105\031\103\032\104\033\102\046\133\001\002\000\046" +
    "\004\ufffa\006\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\043\ufffa\044\ufffa\046\ufffa\050\ufffa\057\ufffa\001\002\000" +
    "\030\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\042\060\045\057\001\002\000" +
    "\006\005\136\047\034\001\002\000\030\007\062\011\047" +
    "\012\054\014\055\022\050\023\061\024\051\026\046\031" +
    "\045\042\060\045\057\001\002\000\010\004\140\043\070" +
    "\044\071\001\002\000\064\003\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\025\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\070\uffbe\001\002\000\010\004\142\043\070\044" +
    "\071\001\002\000\064\003\uffc8\007\uffc8\010\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\025\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\070\uffc8\001\002\000\004\067\u0100\001\002\000\026" +
    "\010\uff8f\013\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\025\uff8f\065\uff8f\070\uff8f\001\002\000\004\007\146" +
    "\001\002\000\004\045\147\001\002\000\026\010\uff8d\013" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\025\uff8d" +
    "\046\uff8a\065\uff8d\001\002\000\004\046\372\001\002\000" +
    "\024\010\015\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\065\030\001\002\000\006\006\156\046" +
    "\157\001\002\000\006\006\uff86\046\uff86\001\002\000\004" +
    "\007\155\001\002\000\006\006\uff85\046\uff85\001\002\000" +
    "\024\010\015\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\065\030\001\002\000\004\047\uff8c\001" +
    "\002\000\004\047\161\001\002\000\032\007\025\010\015" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\060\027\065\030\070\164\001\002\000\032\007\025" +
    "\010\015\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\060\027\065\030\070\367\001\002\000\004" +
    "\007\356\001\002\000\056\003\207\007\200\010\015\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\050\uff81\051\201\054\215\055\223\056\175\060\027\061" +
    "\222\062\174\063\220\064\224\065\030\066\203\001\002" +
    "\000\004\050\166\001\002\000\026\010\uff8b\013\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\025\uff8b\065\uff8b" +
    "\070\uff8b\001\002\000\062\003\uffad\007\uffad\010\uffad\013" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\025\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\066\uffad\001\002\000\056\003\207\007\200\010\015\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\047\353\051\201\054\215\055\223\056\175\060\027\061" +
    "\222\062\174\063\220\064\224\065\030\066\203\001\002" +
    "\000\062\003\uffa5\007\uffa5\010\uffa5\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\025\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001\002" +
    "\000\056\003\uffd7\007\uffd7\010\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\025\uffd7\050\uffd7\051\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002\000\062\003\uffbf" +
    "\007\uffbf\010\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\025\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000\004\047\346" +
    "\001\002\000\004\045\342\001\002\000\062\003\uff96\007" +
    "\uff96\010\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\025\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\001\002\000\062\003\uffc7\007" +
    "\uffc7\010\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\025\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\001\002\000\010\005\134\045" +
    "\064\047\034\001\002\000\004\045\337\001\002\000\062" +
    "\003\uff94\007\uff94\010\uff94\013\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\025\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\001\002\000\030" +
    "\007\062\011\047\012\054\014\055\022\050\023\061\024" +
    "\051\026\046\031\045\042\060\045\057\001\002\000\056" +
    "\003\207\007\200\010\015\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\047\322\051\201\054\215" +
    "\055\223\056\175\060\027\061\222\062\174\063\220\064" +
    "\224\065\030\066\203\001\002\000\062\003\uffa9\007\uffa9" +
    "\010\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\025\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\001\002\000\056\003\207\007\200" +
    "\010\015\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\050\uff82\051\201\054\215\055\223\056\175" +
    "\060\027\061\222\062\174\063\220\064\224\065\030\066" +
    "\203\001\002\000\062\003\uffd0\007\uffd0\010\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\025\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\001\002\000\062\003\uffcf\007\uffcf\010\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\025\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\001\002\000\062\003\uffb6\007\uffb6\010\uffb6\013\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\001\002\000\056\003\207\007\200\010\015\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\047" +
    "\316\051\201\054\215\055\223\056\175\060\027\061\222" +
    "\062\174\063\220\064\224\065\030\066\203\001\002\000" +
    "\062\003\uffbd\007\uffbd\010\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\025\uffbd\050\uffbd\051\uffbd\052" +
    "\271\053\267\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000" +
    "\062\003\uff9e\007\uff9e\010\uff9e\013\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\025\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001\002\000" +
    "\004\045\264\001\002\000\062\003\uffc9\007\uffc9\010\uffc9" +
    "\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\025" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\062\003\uffb9\007\uffb9\010\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\025" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\001\002\000\004\047\260\001\002\000\004" +
    "\057\242\001\002\000\004\047\231\001\002\000\056\003" +
    "\uffa8\007\uffa8\010\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\025\uffa8\047\uffa8\051\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\001\002\000\004\047\225\001\002\000" +
    "\004\007\226\001\002\000\004\050\227\001\002\000\004" +
    "\004\230\001\002\000\062\003\uff9a\007\uff9a\010\uff9a\013" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\025\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a" +
    "\066\uff9a\001\002\000\026\007\062\011\047\012\054\014" +
    "\055\022\050\023\061\024\051\026\046\031\045\045\057" +
    "\001\002\000\006\006\uff98\050\uff98\001\002\000\020\006" +
    "\uff97\027\101\030\105\031\103\032\104\033\102\050\uff97" +
    "\001\002\000\006\006\236\050\235\001\002\000\004\004" +
    "\240\001\002\000\026\007\062\011\047\012\054\014\055" +
    "\022\050\023\061\024\051\026\046\031\045\045\057\001" +
    "\002\000\006\006\uff99\050\uff99\001\002\000\062\003\uff9c" +
    "\007\uff9c\010\uff9c\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\025\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\006\027\245" +
    "\031\247\001\002\000\030\007\062\011\047\012\054\014" +
    "\055\022\050\023\061\024\051\026\046\031\045\042\060" +
    "\045\057\001\002\000\010\043\070\044\071\057\244\001" +
    "\002\000\006\027\uffa3\031\uffa3\001\002\000\004\022\257" +
    "\001\002\000\004\046\251\001\002\000\004\022\250\001" +
    "\002\000\004\046\uff9f\001\002\000\056\003\207\007\200" +
    "\010\015\013\007\015\010\016\006\017\004\020\021\021" +
    "\031\025\020\047\253\051\201\054\215\055\223\056\175" +
    "\060\027\061\222\062\174\063\220\064\224\065\030\066" +
    "\203\001\002\000\062\003\uffa2\007\uffa2\010\uffa2\013\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\025\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\001\002\000\054\003\207\007\200\010\015\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\051" +
    "\201\054\215\055\223\056\175\060\027\061\222\062\174" +
    "\063\220\064\224\065\030\066\203\001\002\000\056\003" +
    "\207\007\200\010\015\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\050\255\051\201\054\215\055" +
    "\223\056\175\060\027\061\222\062\174\063\220\064\224" +
    "\065\030\066\203\001\002\000\062\003\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\025\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\001\002\000\056\003\uffd8\007\uffd8\010" +
    "\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\025\uffd8\050\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\001\002\000\004\046\uffa0\001\002\000\004\007\261\001" +
    "\002\000\004\050\262\001\002\000\004\004\263\001\002" +
    "\000\062\003\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\025\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\001\002" +
    "\000\030\007\062\011\047\012\054\014\055\022\050\023" +
    "\061\024\051\026\046\031\045\042\060\045\057\001\002" +
    "\000\010\043\070\044\071\046\266\001\002\000\056\003" +
    "\uffac\007\uffac\010\uffac\013\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\025\uffac\047\uffac\051\uffac\054\uffac\055" +
    "\uffac\056\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\001\002\000\056\003\207\007\200\010" +
    "\015\013\007\015\010\016\006\017\004\020\021\021\031" +
    "\025\020\047\312\051\201\054\215\055\223\056\175\060" +
    "\027\061\222\062\174\063\220\064\224\065\030\066\203" +
    "\001\002\000\062\003\uffb5\007\uffb5\010\uffb5\013\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5\050\uffb5" +
    "\051\uffb5\052\271\053\303\054\uffb5\055\uffb5\056\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\001\002\000\004\045\300\001\002\000\056\003\207\007" +
    "\200\010\015\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\047\275\051\201\054\215\055\223\056" +
    "\175\060\027\061\222\062\174\063\220\064\224\065\030" +
    "\066\203\001\002\000\062\003\uffb1\007\uffb1\010\uffb1\013" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\001\002\000\062\003\uffaf\007\uffaf\010\uffaf\013" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\025\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\001\002\000\054\003\207\007\200\010\015\013" +
    "\007\015\010\016\006\017\004\020\021\021\031\025\020" +
    "\051\201\054\215\055\223\056\175\060\027\061\222\062" +
    "\174\063\220\064\224\065\030\066\203\001\002\000\056" +
    "\003\207\007\200\010\015\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\050\277\051\201\054\215" +
    "\055\223\056\175\060\027\061\222\062\174\063\220\064" +
    "\224\065\030\066\203\001\002\000\062\003\uffae\007\uffae" +
    "\010\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\025\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\001\002\000\030\007\062\011\047" +
    "\012\054\014\055\022\050\023\061\024\051\026\046\031" +
    "\045\042\060\045\057\001\002\000\010\043\070\044\071" +
    "\046\302\001\002\000\056\003\uffb0\007\uffb0\010\uffb0\013" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\025\uffb0" +
    "\047\uffb0\051\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002" +
    "\000\056\003\207\007\200\010\015\013\007\015\010\016" +
    "\006\017\004\020\021\021\031\025\020\047\306\051\201" +
    "\054\215\055\223\056\175\060\027\061\222\062\174\063" +
    "\220\064\224\065\030\066\203\001\002\000\062\003\uffb2" +
    "\007\uffb2\010\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\025\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\062\003\uffb4" +
    "\007\uffb4\010\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\025\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\054\003\207" +
    "\007\200\010\015\013\007\015\010\016\006\017\004\020" +
    "\021\021\031\025\020\051\201\054\215\055\223\056\175" +
    "\060\027\061\222\062\174\063\220\064\224\065\030\066" +
    "\203\001\002\000\056\003\207\007\200\010\015\013\007" +
    "\015\010\016\006\017\004\020\021\021\031\025\020\050" +
    "\310\051\201\054\215\055\223\056\175\060\027\061\222" +
    "\062\174\063\220\064\224\065\030\066\203\001\002\000" +
    "\062\003\uffb3\007\uffb3\010\uffb3\013\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\025\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000" +
    "\062\003\uffb8\007\uffb8\010\uffb8\013\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\025\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000" +
    "\054\003\207\007\200\010\015\013\007\015\010\016\006" +
    "\017\004\020\021\021\031\025\020\051\201\054\215\055" +
    "\223\056\175\060\027\061\222\062\174\063\220\064\224" +
    "\065\030\066\203\001\002\000\056\003\207\007\200\010" +
    "\015\013\007\015\010\016\006\017\004\020\021\021\031" +
    "\025\020\050\314\051\201\054\215\055\223\056\175\060" +
    "\027\061\222\062\174\063\220\064\224\065\030\066\203" +
    "\001\002\000\062\003\uffb7\007\uffb7\010\uffb7\013\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\001\002\000\062\003\uffab\007\uffab\010\uffab\013\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\025\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\001\002\000\054\003\207\007\200\010\015\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\051\201" +
    "\054\215\055\223\056\175\060\027\061\222\062\174\063" +
    "\220\064\224\065\030\066\203\001\002\000\056\003\207" +
    "\007\200\010\015\013\007\015\010\016\006\017\004\020" +
    "\021\021\031\025\020\050\320\051\201\054\215\055\223" +
    "\056\175\060\027\061\222\062\174\063\220\064\224\065" +
    "\030\066\203\001\002\000\062\003\uffaa\007\uffaa\010\uffaa" +
    "\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\025" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\001\002\000\004\054\331\001\002\000\054" +
    "\003\207\007\200\010\015\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\051\201\054\215\055\223" +
    "\056\175\060\027\061\222\062\174\063\220\064\224\065" +
    "\030\066\203\001\002\000\056\003\207\007\200\010\015" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\050\324\051\201\054\215\055\223\056\175\060\027" +
    "\061\222\062\174\063\220\064\224\065\030\066\203\001" +
    "\002\000\004\054\325\001\002\000\004\045\326\001\002" +
    "\000\030\007\062\011\047\012\054\014\055\022\050\023" +
    "\061\024\051\026\046\031\045\042\060\045\057\001\002" +
    "\000\010\043\070\044\071\046\330\001\002\000\062\003" +
    "\uffa6\007\uffa6\010\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\025\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\001\002\000\004\045" +
    "\332\001\002\000\030\007\062\011\047\012\054\014\055" +
    "\022\050\023\061\024\051\026\046\031\045\042\060\045" +
    "\057\001\002\000\010\043\070\044\071\046\334\001\002" +
    "\000\062\003\uffa7\007\uffa7\010\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\025\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\010\004\336\043\070\044\071\001\002\000\062\003" +
    "\uff95\007\uff95\010\uff95\013\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\025\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\001\002\000\030\007" +
    "\062\011\047\012\054\014\055\022\050\023\061\024\051" +
    "\026\046\031\045\042\060\045\057\001\002\000\010\043" +
    "\070\044\071\046\341\001\002\000\056\003\uffbc\007\uffbc" +
    "\010\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\025\uffbc\047\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\001\002\000\004\007\343\001\002\000\004\005\344" +
    "\001\002\000\030\007\062\011\047\012\054\014\055\022" +
    "\050\023\061\024\051\026\046\031\045\042\060\045\057" +
    "\001\002\000\010\043\070\044\071\057\uffa4\001\002\000" +
    "\026\007\062\011\047\012\054\014\055\022\050\023\061" +
    "\024\051\026\046\031\045\045\057\001\002\000\006\006" +
    "\236\050\350\001\002\000\004\004\351\001\002\000\062" +
    "\003\uff9d\007\uff9d\010\uff9d\013\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\025\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000\062" +
    "\003\uffbb\007\uffbb\010\uffbb\013\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\025\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\054" +
    "\003\207\007\200\010\015\013\007\015\010\016\006\017" +
    "\004\020\021\021\031\025\020\051\201\054\215\055\223" +
    "\056\175\060\027\061\222\062\174\063\220\064\224\065" +
    "\030\066\203\001\002\000\056\003\207\007\200\010\015" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\050\355\051\201\054\215\055\223\056\175\060\027" +
    "\061\222\062\174\063\220\064\224\065\030\066\203\001" +
    "\002\000\062\003\uffba\007\uffba\010\uffba\013\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\025\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001" +
    "\002\000\010\004\uffcb\005\364\006\uffcb\001\002\000\006" +
    "\004\uffcc\006\uffcc\001\002\000\006\004\362\006\361\001" +
    "\002\000\004\007\356\001\002\000\064\003\uffce\007\uffce" +
    "\010\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\025\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\070\uffce\001\002\000\006\004\uffcd" +
    "\006\uffcd\001\002\000\030\007\062\011\047\012\054\014" +
    "\055\022\050\023\061\024\051\026\046\031\045\042\060" +
    "\045\057\001\002\000\012\004\uffca\006\uffca\043\070\044" +
    "\071\001\002\000\032\007\uffd6\010\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\025\uffd6\060\uffd6\065" +
    "\uffd6\070\uffd6\001\002\000\056\003\207\007\200\010\015" +
    "\013\007\015\010\016\006\017\004\020\021\021\031\025" +
    "\020\050\uff83\051\201\054\215\055\223\056\175\060\027" +
    "\061\222\062\174\063\220\064\224\065\030\066\203\001" +
    "\002\000\056\003\207\007\200\010\015\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\050\uff84\051" +
    "\201\054\215\055\223\056\175\060\027\061\222\062\174" +
    "\063\220\064\224\065\030\066\203\001\002\000\006\006" +
    "\uff87\046\uff87\001\002\000\004\047\uff89\001\002\000\004" +
    "\047\374\001\002\000\032\007\025\010\015\013\007\015" +
    "\010\016\006\017\004\020\021\021\031\025\020\060\027" +
    "\065\030\070\164\001\002\000\004\050\376\001\002\000" +
    "\026\010\uff88\013\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\025\uff88\065\uff88\070\uff88\001\002\000\004\002" +
    "\uffda\001\002\000\004\045\u0101\001\002\000\004\046\uff80" +
    "\001\002\000\004\046\u0103\001\002\000\004\047\u0104\001" +
    "\002\000\054\003\207\007\200\010\015\013\007\015\010" +
    "\016\006\017\004\020\021\021\031\025\020\051\201\054" +
    "\215\055\223\056\175\060\027\061\222\062\174\063\220" +
    "\064\224\065\030\066\203\001\002\000\056\003\207\007" +
    "\200\010\015\013\007\015\010\016\006\017\004\020\021" +
    "\021\031\025\020\050\u0106\051\201\054\215\055\223\056" +
    "\175\060\027\061\222\062\174\063\220\064\224\065\030" +
    "\066\203\001\002\000\004\002\uff7f\001\002\000\004\002" +
    "\uffd9\001\002\000\004\002\001\001\002\000\012\004\uffcb" +
    "\005\364\006\uffcb\045\147\001\002\000\004\067\u0100\001" +
    "\002\000\026\010\015\013\007\015\010\016\006\017\004" +
    "\020\021\021\031\025\020\065\030\070\u010c\001\002\000" +
    "\004\067\u0100\001\002\000\004\002\uffdc\001\002\000\004" +
    "\002\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\026\002\015\005\012\006\004\010\021\011" +
    "\013\016\025\017\011\024\023\050\022\051\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\365\010\021\011\013\016\025\017" +
    "\011\024\023\050\u010a\051\010\001\001\000\006\012\357" +
    "\013\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\144\051\143\001\001\000" +
    "\002\001\001\000\006\021\134\022\032\001\001\000\002" +
    "\001\001\000\004\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\034\022\032\001\001\000\002" +
    "\001\001\000\010\014\052\015\051\057\055\001\001\000" +
    "\010\020\040\022\035\023\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\077\057\055\001\001\000\010\014\052" +
    "\015\076\057\055\001\001\000\002\001\001\000\006\021" +
    "\062\022\032\001\001\000\004\022\035\001\001\000\014" +
    "\014\052\015\066\057\055\060\064\061\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\052\015\072\057\055\001\001\000\010\014\052\015" +
    "\071\057\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\052\015\066\057\055\061\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\112\057\055\001\001\000\006\014" +
    "\111\057\055\001\001\000\006\014\110\057\055\001\001" +
    "\000\006\014\107\057\055\001\001\000\006\014\106\057" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\126\057\055\001\001\000\006\014\125" +
    "\057\055\001\001\000\006\014\124\057\055\001\001\000" +
    "\006\014\123\057\055\001\001\000\006\014\122\057\055" +
    "\001\001\000\006\014\121\057\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\131\057\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\052\015\140\057\055\001\001\000" +
    "\004\022\035\001\001\000\010\014\052\015\136\057\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\063" +
    "\150\065\147\001\001\000\002\001\001\000\010\011\153" +
    "\053\151\054\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\153" +
    "\054\370\001\001\000\004\064\157\001\001\000\002\001" +
    "\001\000\022\005\161\006\004\010\021\011\162\016\025" +
    "\017\011\024\023\055\164\001\001\000\016\006\365\010" +
    "\021\011\162\016\025\017\011\024\023\001\001\000\006" +
    "\012\357\013\356\001\001\000\052\003\205\004\171\010" +
    "\207\011\162\016\215\017\176\024\172\025\167\026\212" +
    "\027\216\031\210\034\211\035\166\037\204\040\203\041" +
    "\170\043\220\045\213\056\175\057\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\351\010\207\011\162\016\215\017\176\024\172\025\167" +
    "\026\212\027\216\031\210\034\211\035\166\037\204\040" +
    "\203\041\170\043\220\045\213\056\175\057\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\134\022\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\052\015\334\057\055" +
    "\001\001\000\050\004\320\010\207\011\162\016\215\017" +
    "\176\024\172\025\167\026\212\027\216\031\210\034\211" +
    "\035\166\037\204\040\203\041\170\043\220\045\213\056" +
    "\175\057\201\001\001\000\002\001\001\000\050\004\255" +
    "\010\207\011\162\016\215\017\176\024\172\025\167\026" +
    "\212\027\216\031\210\034\211\035\166\037\204\040\203" +
    "\041\170\043\220\045\213\056\175\057\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\314\010\207\011\162\016\215\017\176\024\172\025" +
    "\167\026\212\027\216\031\210\034\211\035\166\037\204" +
    "\040\203\041\170\043\220\045\213\056\175\057\201\001" +
    "\001\000\010\030\271\032\267\033\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\232\046\233\047\231\057\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\232\047\236\057\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\245\001\001" +
    "\000\010\014\052\015\242\057\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\251\010" +
    "\207\011\162\016\215\017\176\024\172\025\167\026\212" +
    "\027\216\031\210\034\211\035\166\037\204\040\203\041" +
    "\170\043\220\045\213\056\175\057\201\001\001\000\002" +
    "\001\001\000\052\003\253\004\171\010\207\011\162\016" +
    "\215\017\176\024\172\025\167\026\212\027\216\031\210" +
    "\034\211\035\166\037\204\040\203\041\170\043\220\045" +
    "\213\056\175\057\201\001\001\000\050\004\255\010\207" +
    "\011\162\016\215\017\176\024\172\025\167\026\212\027" +
    "\216\031\210\034\211\035\166\037\204\040\203\041\170" +
    "\043\220\045\213\056\175\057\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\052\015\264\057\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\310\010\207\011\162\016" +
    "\215\017\176\024\172\025\167\026\212\027\216\031\210" +
    "\034\211\035\166\037\204\040\203\041\170\043\220\045" +
    "\213\056\175\057\201\001\001\000\006\030\271\033\303" +
    "\001\001\000\002\001\001\000\050\004\273\010\207\011" +
    "\162\016\215\017\176\024\172\025\167\026\212\027\216" +
    "\031\210\034\211\035\166\037\204\040\203\041\170\043" +
    "\220\045\213\056\175\057\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\275\004\171\010\207\011" +
    "\162\016\215\017\176\024\172\025\167\026\212\027\216" +
    "\031\210\034\211\035\166\037\204\040\203\041\170\043" +
    "\220\045\213\056\175\057\201\001\001\000\050\004\255" +
    "\010\207\011\162\016\215\017\176\024\172\025\167\026" +
    "\212\027\216\031\210\034\211\035\166\037\204\040\203" +
    "\041\170\043\220\045\213\056\175\057\201\001\001\000" +
    "\002\001\001\000\010\014\052\015\300\057\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\304\010" +
    "\207\011\162\016\215\017\176\024\172\025\167\026\212" +
    "\027\216\031\210\034\211\035\166\037\204\040\203\041" +
    "\170\043\220\045\213\056\175\057\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\306\004\171\010" +
    "\207\011\162\016\215\017\176\024\172\025\167\026\212" +
    "\027\216\031\210\034\211\035\166\037\204\040\203\041" +
    "\170\043\220\045\213\056\175\057\201\001\001\000\050" +
    "\004\255\010\207\011\162\016\215\017\176\024\172\025" +
    "\167\026\212\027\216\031\210\034\211\035\166\037\204" +
    "\040\203\041\170\043\220\045\213\056\175\057\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\312" +
    "\004\171\010\207\011\162\016\215\017\176\024\172\025" +
    "\167\026\212\027\216\031\210\034\211\035\166\037\204" +
    "\040\203\041\170\043\220\045\213\056\175\057\201\001" +
    "\001\000\050\004\255\010\207\011\162\016\215\017\176" +
    "\024\172\025\167\026\212\027\216\031\210\034\211\035" +
    "\166\037\204\040\203\041\170\043\220\045\213\056\175" +
    "\057\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\316\004\171\010\207\011\162\016\215\017\176" +
    "\024\172\025\167\026\212\027\216\031\210\034\211\035" +
    "\166\037\204\040\203\041\170\043\220\045\213\056\175" +
    "\057\201\001\001\000\050\004\255\010\207\011\162\016" +
    "\215\017\176\024\172\025\167\026\212\027\216\031\210" +
    "\034\211\035\166\037\204\040\203\041\170\043\220\045" +
    "\213\056\175\057\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\322\004\171\010\207\011\162\016" +
    "\215\017\176\024\172\025\167\026\212\027\216\031\210" +
    "\034\211\035\166\037\204\040\203\041\170\043\220\045" +
    "\213\056\175\057\201\001\001\000\050\004\255\010\207" +
    "\011\162\016\215\017\176\024\172\025\167\026\212\027" +
    "\216\031\210\034\211\035\166\037\204\040\203\041\170" +
    "\043\220\045\213\056\175\057\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\052\015\326\057\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\052\015\332\057\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\052\015\337\057\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\052\015\344\057\055\001\001\000\002" +
    "\001\001\000\012\014\232\046\346\047\231\057\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\353\004\171\010\207\011" +
    "\162\016\215\017\176\024\172\025\167\026\212\027\216" +
    "\031\210\034\211\035\166\037\204\040\203\041\170\043" +
    "\220\045\213\056\175\057\201\001\001\000\050\004\255" +
    "\010\207\011\162\016\215\017\176\024\172\025\167\026" +
    "\212\027\216\031\210\034\211\035\166\037\204\040\203" +
    "\041\170\043\220\045\213\056\175\057\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\052\015\364\057\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\367\004" +
    "\171\010\207\011\162\016\215\017\176\024\172\025\167" +
    "\026\212\027\216\031\210\034\211\035\166\037\204\040" +
    "\203\041\170\043\220\045\213\056\175\057\201\001\001" +
    "\000\050\004\255\010\207\011\162\016\215\017\176\024" +
    "\172\025\167\026\212\027\216\031\210\034\211\035\166" +
    "\037\204\040\203\041\170\043\220\045\213\056\175\057" +
    "\201\001\001\000\002\001\001\000\004\066\372\001\001" +
    "\000\002\001\001\000\022\005\161\006\004\010\021\011" +
    "\162\016\025\017\011\024\023\055\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0104\004\171\010\207\011\162\016" +
    "\215\017\176\024\172\025\167\026\212\027\216\031\210" +
    "\034\211\035\166\037\204\040\203\041\170\043\220\045" +
    "\213\056\175\057\201\001\001\000\050\004\255\010\207" +
    "\011\162\016\215\017\176\024\172\025\167\026\212\027" +
    "\216\031\210\034\211\035\166\037\204\040\203\041\170" +
    "\043\220\045\213\056\175\057\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u010d\001\001\000\006\011\144\051\143\001" +
    "\001\000\004\062\u010c\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private EditorDeTextoFrame editor;
    private ManejadorDeDeclaraciones man;
    private ManejadorLecturaEscritura manLecturaEscritura;
    private String ambito="global";

    public parser(AnalizadorLexicoCodigo lex,EditorDeTextoFrame editor){
        super(lex);
        this.editor=editor;
        this.manLecturaEscritura= new ManejadorLecturaEscritura(editor);
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        int columna = s.right;
        int linea = s.left;
        String mensaje="Error SINTACTICO no se esperaba:" + s.value + " en:" + linea + ":" + columna;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        ManejadorDeErrores.escribirErrorSemantico(mensaje, editor.getErroresTextArea());

}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        int columna = s.right;
        int linea = s.left;
        String mensaje="Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna;
        //System.out.println("Error SINTACTICO:" + s.value + " en:" + linea + ":" + columna);
        ManejadorDeErrores.escribirErrorSemantico(mensaje, editor.getErroresTextArea());
 }
 //*******************************************************ANadir goto Main*******************************************************************
 private void anadirGotoMain(){
   int posicion=0;
   for(Cuarteto cuarteto:editor.getManTablas().getTablaDeCuarteto()){
     if(cuarteto.getTipoDeCuarteto()==TipoDeCuarteto.INICIO_FUNCION){
       break;
     }
     posicion++;
   }
   Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, "MAIN", TipoDeCuarteto.GOTO);
   editor.getManTablas().getTablaDeCuarteto().add(posicion, cuartetoGoto);
 }

//********************************************************Metodos para If y variantes********************************************************
    private Cuarteto crearInstruccionDeIf(Nodo n1){
      if(n1!=null){
        ManejadorDeExpresionesBooleanas manejadorBooleano = new ManejadorDeExpresionesBooleanas(editor,ambito);
        Cuarteto ultimoCuarteto=manejadorBooleano.evaluarExpresionBooleana(n1);
        if(ultimoCuarteto!=null){
          Cuarteto labelSi = new Cuarteto(null, null, null, ultimoCuarteto.getOperador1(), TipoDeCuarteto.SOLO_LABEL);
          editor.getManTablas().anadirCuarteto(labelSi);
        }
        return ultimoCuarteto;
      }
      return null;
    }

    private String crearInstruccionFinalIf(Cuarteto ultimoCuarteto){
      String labelSalida=null;
      if(ultimoCuarteto!=null){
        labelSalida = "L" + editor.getManTablas().obtenerNuevoNumeroDeLabel();
        Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, labelSalida, TipoDeCuarteto.GOTO);
        Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(cuartetoGoto);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
      return labelSalida;
    }

    private void crearInstruccionFInalElsIf(Cuarteto ultimoCuarteto){
      if(ultimoCuarteto!=null){
        Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, null, TipoDeCuarteto.GOTO);
        Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(cuartetoGoto);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
    }

    private void cambiarLabelSalida(String labelSalida){
      if(labelSalida!=null){
        for(Cuarteto cuarteto:editor.getManTablas().getTablaDeCuarteto()){
            if(cuarteto.getResultado()==null && cuarteto.getTipoDeCuarteto()==TipoDeCuarteto.GOTO){
              cuarteto.setResultado(labelSalida);
            }
        }
        Cuarteto labelNo = new Cuarteto(null, null, null, labelSalida, TipoDeCuarteto.SOLO_LABEL);
        editor.getManTablas().anadirCuarteto(labelNo);
      }
    }

//*******************************************************Metodos para While*****************************************************
private Cuarteto[] crearInstruccionDeWhile(Nodo n1){
  Cuarteto[] arreglo=new Cuarteto[2];
  if(n1!=null){
    String labelInicio = "L" + editor.getManTablas().obtenerNuevoNumeroDeLabel();
    Cuarteto cuartetoRepetir = new Cuarteto(null, null, null, labelInicio, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(cuartetoRepetir);
    Cuarteto ultimoCuarteto=crearInstruccionDeIf(n1);
    arreglo[0]=cuartetoRepetir;
    arreglo[1]=ultimoCuarteto;
  }
  return arreglo;
}

private void crearInstruccionFinalWhile(Cuarteto[] cuartetos){
    Cuarteto cuartetoRepetir= cuartetos[0];
    Cuarteto cuartetoNo= cuartetos[1];
    if(cuartetoRepetir!=null && cuartetoNo!=null){
      Cuarteto cuartetoGoto = new Cuarteto("goto", null, null, cuartetoRepetir.getResultado(), TipoDeCuarteto.GOTO);
      Cuarteto labelNo = new Cuarteto(null, null, null, cuartetoNo.getResultado(), TipoDeCuarteto.SOLO_LABEL);
      editor.getManTablas().anadirCuarteto(cuartetoGoto);
      editor.getManTablas().anadirCuarteto(labelNo);

    }
}

//************************************************Metodos para do while****************************************************
private void finalicacionDeWhile(Nodo n1,Cuarteto cuartetoInicio){
    ManejadorDeExpresionesBooleanas manejadorBooleano = new ManejadorDeExpresionesBooleanas(editor,ambito);
    Cuarteto ultimoCuarteto = manejadorBooleano.evaluarExpresionBooleana(n1);
    if(ultimoCuarteto!=null){
      //Modificar el penultimo
      int penultimaPosicion=editor.getManTablas().getTablaDeCuarteto().size()-2;
      editor.getManTablas().getTablaDeCuarteto().get(penultimaPosicion).setResultado(cuartetoInicio.getResultado());
      //Modificar el ultimo
      ultimoCuarteto.setOperador1(cuartetoInicio.getResultado());
      Cuarteto labelNo = new Cuarteto(null, null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL);
      editor.getManTablas().anadirCuarteto(labelNo);
    }
}

//**********************************************Metodos para for***************************************************************
private void finalizacionDeFor(Cuarteto ultimoCuarteto,Cuarteto cuartetoInicio,IncrementoDecremento incr){
  if(ultimoCuarteto!=null && cuartetoInicio!=null){
    String numTemporal = "t" + String.valueOf(editor.getManTablas().obtenerNuevoTemporal());
    editor.getManTablas().anadirCuarteto(new Cuarteto(incr.getTipo(),cuartetoInicio.getOperador1(),incr.getNumero(),cuartetoInicio.getOperador1(),TipoDeCuarteto.SOLO_EXPRESION));
    //Cuarteto que permite volver hacia arriba
    editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, cuartetoInicio.getResultado(), TipoDeCuarteto.GOTOSALIDA));
    //Cuarteto que genera la etiqueta final
    editor.getManTablas().anadirCuarteto(new Cuarteto("goto", null, null, ultimoCuarteto.getResultado(), TipoDeCuarteto.SOLO_LABEL));
  }
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MAS,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.MENOS,n1, n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.POR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= expresion DIV expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.DIV,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= expresion PORCENTAJE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoExpresion(OperacionAritmetica.PORCENTAJE,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= MENOS PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.IDENTIFICADOR,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.TRUE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.FALSE,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= DECLARACION_CARACTER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_CARACTER,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= NUMERO_ENTERO 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_ENTERO,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMERO_DECIMAL 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMAL,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= NUMERO_DECIMALF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.NUMERO_DECIMALF,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= DECLARACION_STRING 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NodoHojaExpresion(TipoDeHoja.DECLARACION_STRING,i,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= IDENTIFICADOR conjuntoDeDimensiones 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> expresiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoHojaExpresion(TipoDeHoja.IDENTIFICADOR,i,ileft,iright,expresiones);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= llamadaDeFuncion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoHojaExpresion n1 = (NodoHojaExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comparacion ::= comparacion AND comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.AND,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comparacion ::= comparacion OR comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoLogico(OperacionLogica.OR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comparacion ::= NOT comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparacion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparacion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MENOR_IGUAL,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.MAYOR_IGUAL,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparacion ::= expresion DISTINTO_DE expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.DISTINTO_DE,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparacion ::= expresion IGUAL_A expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoComparacion(OperacionComparacion.IGUAL_A,n1,n2,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparacion ::= expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDeVariable ::= STRING 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDeVariable ::= BOOLEAN 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDeVariable ::= CHAR 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDeVariable ::= BYTE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.BYTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoDeVariable ::= INT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoDeVariable ::= LONG 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.LONG;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoDeVariable ::= FLOAT 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.FLOAT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoDeVariable ::= DOUBLE 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoDeVariable ::= VOID 
            {
              TipoDeVariable RESULT =null;
		RESULT=TipoDeVariable.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= conjuntoDeDeclaraciones conjuntoDeSubprogramas SEPARADOR funcionMain 
            {
              Object RESULT =null;
		anadirGotoMain();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= conjuntoDeDeclaraciones SEPARADOR funcionMain 
            {
              Object RESULT =null;
		anadirGotoMain();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicio ::= conjuntoDeSubprogramas SEPARADOR funcionMain 
            {
              Object RESULT =null;
		anadirGotoMain();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= SEPARADOR funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuntoDeDeclaraciones ::= conjuntoDeDeclaraciones unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuntoDeDeclaraciones ::= unaDeclaracion 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
   lista.add(n1);
   RESULT=lista;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unaDeclaracion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unaDeclaracion ::= asignacionDeVariable 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unaDeclaracion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArregloDeclaracion n1 = (NodoArregloDeclaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unaDeclaracion ::= asignacionDeArreglo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unaInstruccion ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unaInstruccion ::= declaracionDeVariables 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracionDeVariables ::= tipoDeVariable conjuntoDeIdentificadoresParaVariables PCOMA 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<NodoId> lista = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
DeclaracionDeVariable declaracion = new DeclaracionDeVariable(tipo,lista,ambito,tipoleft,tiporight);
CreadorDeVariables.declararVariables(declaracion,editor);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjuntoDeIdentificadoresParaVariables ::= conjuntoDeIdentificadoresParaVariables COMA unIdentificadorParaVariable 
            {
              LinkedList<NodoId> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<NodoId> lista = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId n1 = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjuntoDeIdentificadoresParaVariables ::= unIdentificadorParaVariable 
            {
              LinkedList<NodoId> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId n1 = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<NodoId> miLista = new LinkedList<>();
  miLista.add(n1);
  RESULT= miLista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unIdentificadorParaVariable ::= IDENTIFICADOR 
            {
              NodoId RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,null,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unIdentificadorParaVariable ::= IDENTIFICADOR ASIGNACION comparacion 
            {
              NodoId RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,n1,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaInstruccion ::= asignacionDeVariable 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacionDeVariable ::= IDENTIFICADOR ASIGNACION comparacion PCOMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoId nodo = new NodoId(i,n1,ileft,iright);
  CreadorDeVariables.asignarVariable(nodo,editor,ambito);
  RESULT=nodo;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unaInstruccion ::= declaracionDeArreglos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionDeArreglos ::= ARRAY tipoDeVariable conjuntoDeDimensiones conjuntoDeIdentificadoresParaArreglo PCOMA 
            {
              NodoArregloDeclaracion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> dimensiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaIdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaIdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<NodoId> listaIds = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CreadorDeVariables.declararArreglo(tipo,listaIds,dimensiones,editor,ambito);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeArreglos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjuntoDeDimensiones ::= conjuntoDeDimensiones unaDimension 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);
RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conjuntoDeDimensiones ::= unaDimension 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
lista.add(n1);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeDimensiones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unaDimension ::= CORCHETE_ABIERTO comparacion CORCHETE_CERRADO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDimension",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conjuntoDeIdentificadoresParaArreglo ::= conjuntoDeIdentificadoresParaArreglo COMA unIdentificadorParaArreglo 
            {
              LinkedList<NodoId> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<NodoId> lista = (LinkedList<NodoId>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId i = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(i);
RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conjuntoDeIdentificadoresParaArreglo ::= unIdentificadorParaArreglo 
            {
              LinkedList<NodoId> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoId n1 = (NodoId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<NodoId> lista = new LinkedList<>();
lista.add(n1);
RESULT=lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeIdentificadoresParaArreglo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unIdentificadorParaArreglo ::= IDENTIFICADOR 
            {
              NodoId RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new NodoId(i,null,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unIdentificadorParaArreglo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unaInstruccion ::= asignacionDeArreglo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacionDeArreglo ::= IDENTIFICADOR conjuntoDeDimensiones ASIGNACION comparacion PCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Nodo> expresiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  NodoId nodoId = new NodoId(id,expresion,idleft,idright);
  CreadorDeVariables.asignarValorArreglo(editor,ambito,expresiones,nodoId);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unaInstruccion ::= declaracionDeEstructuraIf 
            {
              Nodo RESULT =null;
		int labelFinalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelFinalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String labelFinal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(labelFinal!=null){
  Cuarteto labelSalida = new Cuarteto(null, null, null, labelFinal, TipoDeCuarteto.SOLO_LABEL);
  editor.getManTablas().anadirCuarteto(labelSalida);
}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // puenteIf ::= IF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Cuarteto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=crearInstruccionDeIf(n1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puenteIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracionDeEstructuraIf ::= puenteIf unaInstruccion 
            {
              String RESULT =null;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=crearInstruccionFinalIf(ultimoCuarteto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionDeEstructuraIf ::= puenteIf CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              String RESULT =null;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=crearInstruccionFinalIf(ultimoCuarteto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIf",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unaInstruccion ::= declaracionDeEstructuraIfElse 
            {
              Nodo RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  if(labelSalida!=null){
    Cuarteto labelFinal = new Cuarteto(null, null, null, labelSalida, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(labelFinal);
  }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE unaInstruccion 
            {
              String RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=labelSalida;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionDeEstructuraIfElse ::= declaracionDeEstructuraIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              String RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=labelSalida;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraIfElse",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unaInstruccion ::= declaracionDeEstructuraElseIf 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf 
            {
              Object RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cambiarLabelSalida(labelSalida);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE unaInstruccion 
            {
              Object RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cambiarLabelSalida(labelSalida);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionDeEstructuraElseIf ::= declaracionDeEstructuraIf conjuntoDeElseIf ELSE CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int labelSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int labelSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String labelSalida = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		cambiarLabelSalida(labelSalida);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraElseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conjuntoDeElseIf ::= conjuntoDeElseIf unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conjuntoDeElseIf ::= unElseIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElseIf",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // puenteElsIf ::= ELSIF PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Cuarteto RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=crearInstruccionDeIf(n1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puenteElsIf",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unElseIf ::= puenteElsIf unaInstruccion 
            {
              Object RESULT =null;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		crearInstruccionFInalElsIf(ultimoCuarteto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unElseIf ::= puenteElsIf CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		crearInstruccionFInalElsIf(ultimoCuarteto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unElseIf",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unaInstruccion ::= declaracionDeEstructuraWhile 
            {
              Nodo RESULT =null;
		int cuartetosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuartetosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto[] cuartetos = (Cuarteto[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // puenteWhile ::= WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Cuarteto[] RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=crearInstruccionDeWhile(n1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puenteWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionDeEstructuraWhile ::= puenteWhile unaInstruccion 
            {
              Cuarteto[] RESULT =null;
		int cuartetosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuartetosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto[] cuartetos = (Cuarteto[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		crearInstruccionFinalWhile(cuartetos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracionDeEstructuraWhile ::= puenteWhile CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Cuarteto[] RESULT =null;
		int cuartetosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuartetosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto[] cuartetos = (Cuarteto[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		crearInstruccionFinalWhile(cuartetos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraWhile",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unaInstruccion ::= declaracionDeEstructuraDoWhile 
            {
              Nodo RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracionDo ::= DO 
            {
              Cuarteto RESULT =null;
		  String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
  Cuarteto inicioDeWhile=new Cuarteto("goto", null, null, label, TipoDeCuarteto.SOLO_LABEL);
  editor.getManTablas().anadirCuarteto(inicioDeWhile);
  RESULT= inicioDeWhile;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionDeEstructuraDoWhile ::= declaracionDo unaInstruccion WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Cuarteto[] RESULT =null;
		int cuartetoInicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cuartetoInicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Cuarteto cuartetoInicio = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		finalicacionDeWhile(n1,cuartetoInicio);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracionDeEstructuraDoWhile ::= declaracionDo CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO comparacion PARENTESIS_CERRADO 
            {
              Cuarteto[] RESULT =null;
		int cuartetoInicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cuartetoInicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Cuarteto cuartetoInicio = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		finalicacionDeWhile(n1,cuartetoInicio);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraDoWhile",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unaInstruccion ::= declaracionDeEstructuraFor 
            {
              Nodo RESULT =null;
		int cuartetosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuartetosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto[] cuartetos = (Cuarteto[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignacionParaFor ::= FOR PARENTESIS_ABIERTO IDENTIFICADOR ASIGNACION comparacion 
            {
              Cuarteto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //ASIGNACION y primera etiqueta
    NodoId nodo = new NodoId(i,n1,ileft,iright);
    CreadorDeVariables.asignarVariable(nodo,editor,ambito);
    String label = "L"+editor.getManTablas().obtenerNuevoNumeroDeLabel();
    Cuarteto inicioDeFor=new Cuarteto("goto", i, null, label, TipoDeCuarteto.SOLO_LABEL);
    editor.getManTablas().anadirCuarteto(inicioDeFor);
    RESULT=inicioDeFor;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionParaFor",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comparacionParaFor ::= DOS_PUNTOS comparacion DOS_PUNTOS 
            {
              Cuarteto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=crearInstruccionDeIf(n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacionParaFor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracionDeEstructuraFor ::= asignacionParaFor comparacionParaFor incrementoDecremento PARENTESIS_CERRADO unaInstruccion 
            {
              Cuarteto[] RESULT =null;
		int cuartetoInicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuartetoInicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Cuarteto cuartetoInicio = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IncrementoDecremento incr = (IncrementoDecremento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		finalizacionDeFor(ultimoCuarteto,cuartetoInicio,incr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracionDeEstructuraFor ::= asignacionParaFor comparacionParaFor incrementoDecremento PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Cuarteto[] RESULT =null;
		int cuartetoInicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cuartetoInicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Cuarteto cuartetoInicio = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ultimoCuartetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ultimoCuartetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Cuarteto ultimoCuarteto = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IncrementoDecremento incr = (IncrementoDecremento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		finalizacionDeFor(ultimoCuarteto,cuartetoInicio,incr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeEstructuraFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // incrementoDecremento ::= MAS NUMERO_ENTERO 
            {
              IncrementoDecremento RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IncrementoDecremento("+",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // incrementoDecremento ::= MENOS NUMERO_ENTERO 
            {
              IncrementoDecremento RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IncrementoDecremento("-",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementoDecremento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unaInstruccion ::= declaracionDeFuncionesPredefinidas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracionDeFuncionesPredefinidas ::= PRINTLN CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		manLecturaEscritura.evaluarPrint(lista,ambito,TipoDeCuarteto.Println);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracionDeFuncionesPredefinidas ::= PRINT CORCHETE_ABIERTO conjuntoDeTexto CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		manLecturaEscritura.evaluarPrint(lista,ambito,TipoDeCuarteto.Print);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracionDeFuncionesPredefinidas ::= SCANS CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		manLecturaEscritura.evaluarScan(i,ambito,TipoDeCuarteto.SCANS,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracionDeFuncionesPredefinidas ::= SCANN CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		manLecturaEscritura.evaluarScan(i,ambito,TipoDeCuarteto.SCANN,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeFuncionesPredefinidas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conjuntoDeTexto ::= conjuntoDeTexto COMA unTexto 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conjuntoDeTexto ::= unTexto 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista= new LinkedList<>();
  lista.add(n1);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unTexto ::= expresion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unaInstruccion ::= instruccionReturn 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instruccionReturn ::= RETURN comparacion PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CreadorDeVariables.guardarReturn(ambito,expresion,editor,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unaInstruccion ::= llamadaDeFuncion 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // llamadaDeFuncion ::= IDENTIFICADOR PARENTESIS_ABIERTO listaDeParametros PARENTESIS_CERRADO 
            {
              NodoHojaExpresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> expresiones = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =CreadorDeVariables.evaluarLlamadaDeFuncion(i,expresiones,editor,ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaDeFuncion",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // listaDeParametros ::= listaDeParametros COMA miParametro 
            {
              LinkedList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(n1);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeParametros",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // listaDeParametros ::= miParametro 
            {
              LinkedList<Nodo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo> lista = new LinkedList<>();
  lista.add(n1);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeParametros",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // miParametro ::= comparacion 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("miParametro",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conjuntoDeSubprogramas ::= conjuntoDeSubprogramas unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // conjuntoDeSubprogramas ::= unSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeSubprogramas",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
ambito=i;
  Cuarteto cuartetoInicioFuncion = new Cuarteto(null, null, null,i, TipoDeCuarteto.INICIO_FUNCION);
  editor.getManTablas().anadirCuarteto(cuartetoInicioFuncion);

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Parametro> parametros = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
CreadorDeVariables.guardarFuncion(i,tipo,parametros,ileft,iright,editor,ambito);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO NT$0 conjuntoDeParametros PARENTESIS_CERRADO NT$1 CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Parametro> parametros = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ambito="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
ambito=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
CreadorDeVariables.guardarFuncion(i,tipo,null,ileft,iright,editor,ambito);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unSubPrograma ::= tipoDeVariable IDENTIFICADOR PARENTESIS_ABIERTO NT$2 PARENTESIS_CERRADO NT$3 CORCHETE_ABIERTO cuerpoDeFuncion CORCHETE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ambito="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unSubPrograma",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // conjuntoDeParametros ::= conjuntoDeParametros COMA unParametro 
            {
              LinkedList<Parametro> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parametro> lista = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro parametro = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(parametro);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // conjuntoDeParametros ::= unParametro 
            {
              LinkedList<Parametro> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro parametro = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Parametro> lista= new LinkedList<Parametro>();
  lista.add(parametro);
  RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unParametro ::= tipoDeVariable IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoDeVariable tipo = (TipoDeVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Parametro(tipo,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones SEPARADOR conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpoDeFuncion ::= conjuntoDeDeclaraciones SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpoDeFuncion ::= SEPARADOR conjuntoDeInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpoDeFuncion ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoDeFuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
ambito=i;
  Cuarteto cuartetoInicioFuncion = new Cuarteto(null, null, null,i, TipoDeCuarteto.INICIO_FUNCION);
  editor.getManTablas().anadirCuarteto(cuartetoInicioFuncion);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcionMain ::= MAIN PARENTESIS_ABIERTO NT$4 PARENTESIS_CERRADO CORCHETE_ABIERTO conjuntoDeInstrucciones CORCHETE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
